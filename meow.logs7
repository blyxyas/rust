Building stage0 library artifacts (x86_64-unknown-linux-gnu)
Building compiler artifacts (stage0 -> stage1, x86_64-unknown-linux-gnu)
Creating a sysroot for stage1 compiler (use `rustup toolchain link 'name' build/host/stage1`)
Building stage0 tool lld-wrapper (x86_64-unknown-linux-gnu)
Building stage1 library artifacts (x86_64-unknown-linux-gnu)
Building compiler artifacts (stage1 -> stage2, x86_64-unknown-linux-gnu)
Building tool clippy-driver (stage1 -> stage2, x86_64-unknown-linux-gnu)
Building tool rustdoc (stage0 -> stage1, x86_64-unknown-linux-gnu)
Testing clippy (stage1 -> stage2, x86_64-unknown-linux-gnu)

running 2 tests
..
test result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s


running 1 test
.
test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

tests/ui/dbg_macro/dbg_macro.rs ... FAILED

FAILED TEST: tests/ui/dbg_macro/dbg_macro.rs
command: CLIPPY_CONF_DIR="tests" RUSTC_ICE="0" "/home/meow/git/rust/build/x86_64-unknown-linux-gnu/stage1-tools/x86_64-unknown-linux-gnu/release/clippy-driver" "--error-format=json" "--emit=metadata" "-Aunused" "-Ainternal_features" "-Zui-testing" "-Zdeduplicate-diagnostics=no" "-Dwarnings" "-Ldependency=/home/meow/git/rust/build/x86_64-unknown-linux-gnu/stage1-tools/x86_64-unknown-linux-gnu/release/deps" "--extern=clippy_config=/home/meow/git/rust/build/x86_64-unknown-linux-gnu/stage1-tools/x86_64-unknown-linux-gnu/release/deps/libclippy_config-1156fe68cefd384c.rlib" "--extern=clippy_lints=/home/meow/git/rust/build/x86_64-unknown-linux-gnu/stage1-tools/x86_64-unknown-linux-gnu/release/deps/libclippy_lints-b9407a37c4a7ac06.rlib" "--extern=clippy_utils=/home/meow/git/rust/build/x86_64-unknown-linux-gnu/stage1-tools/x86_64-unknown-linux-gnu/release/deps/libclippy_utils-ff05c16503a43e92.rlib" "--extern=futures=/home/meow/git/rust/build/x86_64-unknown-linux-gnu/stage1-tools/x86_64-unknown-linux-gnu/release/deps/libfutures-b22408330149fc50.rlib" "--extern=if_chain=/home/meow/git/rust/build/x86_64-unknown-linux-gnu/stage1-tools/x86_64-unknown-linux-gnu/release/deps/libif_chain-f60edfae188327ea.rlib" "--extern=itertools=/home/meow/git/rust/build/x86_64-unknown-linux-gnu/stage1-tools/x86_64-unknown-linux-gnu/release/deps/libitertools-65b9d69b016a6069.rlib" "--extern=parking_lot=/home/meow/git/rust/build/x86_64-unknown-linux-gnu/stage1-tools/x86_64-unknown-linux-gnu/release/deps/libparking_lot-b162db153dd4e98f.rlib" "--extern=quote=/home/meow/git/rust/build/x86_64-unknown-linux-gnu/stage1-tools/x86_64-unknown-linux-gnu/release/deps/libquote-ac38a0bfc4dcb133.rlib" "--extern=regex=/home/meow/git/rust/build/x86_64-unknown-linux-gnu/stage1-tools/x86_64-unknown-linux-gnu/release/deps/libregex-82cffa40d99fe504.rlib" "--extern=serde=/home/meow/git/rust/build/x86_64-unknown-linux-gnu/stage1-tools/x86_64-unknown-linux-gnu/release/deps/libserde-a4c29dbaf758d1d2.rlib" "--extern=serde_derive=/home/meow/git/rust/build/x86_64-unknown-linux-gnu/stage1/lib/rustlib/x86_64-unknown-linux-gnu/lib/libserde_derive-bb4012d3183608bd.so" "--extern=syn=/home/meow/git/rust/build/x86_64-unknown-linux-gnu/stage1-tools/x86_64-unknown-linux-gnu/release/deps/libsyn-90c793fc7de7d308.rlib" "--extern=tokio=/home/meow/git/rust/build/x86_64-unknown-linux-gnu/stage1-tools/x86_64-unknown-linux-gnu/release/deps/libtokio-9c813a270769b35a.rlib" "-Ldependency=/home/meow/git/rust/build/x86_64-unknown-linux-gnu/stage1-tools/release/deps" "--test" "--out-dir" "/home/meow/git/rust/build/x86_64-unknown-linux-gnu/stage1-tools/ui_test/tests/ui/dbg_macro" "tests/ui/dbg_macro/dbg_macro.rs" "--edition" "2021"

error: actual output differed from expected
Execute `cargo uibless` to update `tests/ui/dbg_macro/dbg_macro.stderr` to the actual output
--- tests/ui/dbg_macro/dbg_macro.stderr
+++ <stderr output>
-error: the `dbg!` macro is intended as a debugging tool
+[compiler/rustc_lint/src/levels.rs:149:5] &visitor.dont_need_to_run = {
-  --> tests/ui/dbg_macro/dbg_macro.rs:5:22
+    LintId {
-   |
+        lint: Lint {
-LL |     if let Some(n) = dbg!(n.checked_sub(4)) { n } else { n }
+            name: "KEYWORD_IDENTS_2018",
-   |                      ^^^^^^^^^^^^^^^^^^^^^^
+            default_level: Allow,
-   |
+            desc: "detects edition keywords being used as an identifier",
-   = note: `-D clippy::dbg-macro` implied by `-D warnings`
+            edition_lint_opts: None,
-   = help: to override `-D warnings` add `#[allow(clippy::dbg_macro)]`
+            report_in_external_macro: false,
-help: remove the invocation before committing it to a version control system
+            future_incompatible: Some(
-   |
+                FutureIncompatibleInfo {
-LL |     if let Some(n) = n.checked_sub(4) { n } else { n }
+                    reference: "issue #49716 <https://github.com/rust-lang/rust/issues/49716>",
-   |                      ~~~~~~~~~~~~~~~~
+                    reason: EditionError(
-
+                        Edition2018,
-error: the `dbg!` macro is intended as a debugging tool
+                    ),
-  --> tests/ui/dbg_macro/dbg_macro.rs:11:8
+                    explain_reason: true,
-   |
+                },
-LL |     if dbg!(n <= 1) {
+            ),
-   |        ^^^^^^^^^^^^
+            is_externally_loaded: false,
-   |
+            feature_gate: None,
-help: remove the invocation before committing it to a version control system
+            crate_level_only: false,
-   |
+            eval_always: false,
-LL |     if n <= 1 {
+        },
-   |        ~~~~~~
+    },
-
+    LintId {
-error: the `dbg!` macro is intended as a debugging tool
+        lint: Lint {
-  --> tests/ui/dbg_macro/dbg_macro.rs:13:9
+            name: "KEYWORD_IDENTS_2024",
-   |
+            default_level: Allow,
-LL |         dbg!(1)
+            desc: "detects edition keywords being used as an identifier",
-   |         ^^^^^^^
+            edition_lint_opts: None,
-   |
+            report_in_external_macro: false,
-help: remove the invocation before committing it to a version control system
+            future_incompatible: Some(
-   |
+                FutureIncompatibleInfo {
-LL |         1
+                    reference: "<https://doc.rust-lang.org/nightly/edition-guide/rust-2024/gen-keyword.html>",
-   |
+                    reason: EditionError(
-
+                        Edition2024,
-error: the `dbg!` macro is intended as a debugging tool
+                    ),
-  --> tests/ui/dbg_macro/dbg_macro.rs:16:9
+                    explain_reason: true,
-   |
+                },
-LL |         dbg!(n * factorial(n - 1))
+            ),
-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^
+            is_externally_loaded: false,
-   |
+            feature_gate: None,
-help: remove the invocation before committing it to a version control system
+            crate_level_only: false,
-   |
+            eval_always: false,
-LL |         n * factorial(n - 1)
+        },
-   |
+    },
-
+    LintId {
-error: the `dbg!` macro is intended as a debugging tool
+        lint: Lint {
-  --> tests/ui/dbg_macro/dbg_macro.rs:22:5
+            name: "UNUSED_PARENS",
-   |
+            default_level: Warn,
-LL |     dbg!(42);
+            desc: "`if`, `match`, `while` and `return` do not need parentheses",
-   |     ^^^^^^^^
+            edition_lint_opts: None,
-   |
+            report_in_external_macro: false,
-help: remove the invocation before committing it to a version control system
+            future_incompatible: None,
-   |
+            is_externally_loaded: false,
-LL |     42;
+            feature_gate: None,
-   |     ~~
+            crate_level_only: false,
-
+            eval_always: false,
-error: the `dbg!` macro is intended as a debugging tool
+        },
-  --> tests/ui/dbg_macro/dbg_macro.rs:24:14
+    },
-   |
+    LintId {
-LL |     foo(3) + dbg!(factorial(4));
+        lint: Lint {
-   |              ^^^^^^^^^^^^^^^^^^
+            name: "UNUSED_BRACES",
-   |
+            default_level: Warn,
-help: remove the invocation before committing it to a version control system
+            desc: "unnecessary braces around an expression",
-   |
+            edition_lint_opts: None,
-LL |     foo(3) + factorial(4);
+            report_in_external_macro: false,
-   |              ~~~~~~~~~~~~
+            future_incompatible: None,
-
+            is_externally_loaded: false,
-error: the `dbg!` macro is intended as a debugging tool
+            feature_gate: None,
-  --> tests/ui/dbg_macro/dbg_macro.rs:26:5
+            crate_level_only: false,
-   |
+            eval_always: false,
-LL |     dbg!(1, 2, 3, 4, 5);
+        },
-   |     ^^^^^^^^^^^^^^^^^^^
+    },
-   |
+    LintId {
-help: remove the invocation before committing it to a version control system
+        lint: Lint {
-   |
+            name: "UNUSED_IMPORT_BRACES",
-LL |     (1, 2, 3, 4, 5);
+            default_level: Allow,
-   |     ~~~~~~~~~~~~~~~
+            desc: "unnecessary braces around an imported item",
-
+            edition_lint_opts: None,
-error: the `dbg!` macro is intended as a debugging tool
+            report_in_external_macro: false,
-  --> tests/ui/dbg_macro/dbg_macro.rs:48:5
+            future_incompatible: None,
-   |
+            is_externally_loaded: false,
-LL |     dbg!();
+            feature_gate: None,
-   |     ^^^^^^
+            crate_level_only: false,
-   |
+            eval_always: false,
-help: remove the invocation before committing it to a version control system
+        },
-   |
+    },
-LL -     dbg!();
+    LintId {
-   |
+        lint: Lint {
-
+            name: "NON_ASCII_IDENTS",
-error: the `dbg!` macro is intended as a debugging tool
+            default_level: Allow,
-  --> tests/ui/dbg_macro/dbg_macro.rs:51:13
+            desc: "detects non-ASCII identifiers",
-   |
+            edition_lint_opts: None,
-LL |     let _ = dbg!();
+            report_in_external_macro: false,
-   |             ^^^^^^
+            future_incompatible: None,
-   |
+            is_externally_loaded: false,
-help: remove the invocation before committing it to a version control system
+            feature_gate: None,
-   |
+            crate_level_only: true,
-LL |     let _ = ();
+            eval_always: false,
-   |             ~~
+        },
-
+    },
-error: the `dbg!` macro is intended as a debugging tool
+    LintId {
-  --> tests/ui/dbg_macro/dbg_macro.rs:53:9
+        lint: Lint {
-   |
+            name: "INTERNAL_FEATURES",
-LL |     bar(dbg!());
+            default_level: Warn,
-   |         ^^^^^^
+            desc: "internal features are not supposed to be used",
-   |
+            edition_lint_opts: None,
-help: remove the invocation before committing it to a version control system
+            report_in_external_macro: false,
-   |
+            future_incompatible: None,
-LL |     bar(());
+            is_externally_loaded: false,
-   |         ~~
+            feature_gate: None,
-
+            crate_level_only: false,
-error: the `dbg!` macro is intended as a debugging tool
+            eval_always: false,
-  --> tests/ui/dbg_macro/dbg_macro.rs:55:10
+        },
-   |
+    },
-LL |     foo!(dbg!());
+    LintId {
-   |          ^^^^^^
+        lint: Lint {
-   |
+            name: "REDUNDANT_SEMICOLONS",
-help: remove the invocation before committing it to a version control system
+            default_level: Warn,
-   |
+            desc: "detects unnecessary trailing semicolons",
-LL |     foo!(());
+            edition_lint_opts: None,
-   |          ~~
+            report_in_external_macro: false,
-
+            future_incompatible: None,
-error: the `dbg!` macro is intended as a debugging tool
+            is_externally_loaded: false,
-  --> tests/ui/dbg_macro/dbg_macro.rs:57:16
+            feature_gate: None,
-   |
+            crate_level_only: false,
-LL |     foo2!(foo!(dbg!()));
+            eval_always: false,
-   |                ^^^^^^
+        },
-   |
+    },
-help: remove the invocation before committing it to a version control system
+    LintId {
-   |
+        lint: Lint {
-LL |     foo2!(foo!(()));
+            name: "UNUSED_DOC_COMMENTS",
-   |                ~~
+            default_level: Warn,
-
+            desc: "detects doc comments that aren't used by rustdoc",
-error: the `dbg!` macro is intended as a debugging tool
+            edition_lint_opts: None,
-  --> tests/ui/dbg_macro/dbg_macro.rs:43:13
+            report_in_external_macro: false,
-   |
+            future_incompatible: None,
-LL |             dbg!();
+            is_externally_loaded: false,
-   |             ^^^^^^
+            feature_gate: None,
-...
+            crate_level_only: false,
-LL |     expand_to_dbg!();
+            eval_always: false,
-   |     ---------------- in this macro invocation
+        },
-   |
+    },
-   = note: this error originates in the macro `expand_to_dbg` (in Nightly builds, run with -Z macro-backtrace for more info)
+    LintId {
-help: remove the invocation before committing it to a version control system
+        lint: Lint {
-   |
+            name: "EDITION_2024_EXPR_FRAGMENT_SPECIFIER",
-LL -             dbg!();
+            default_level: Allow,
-   |
+            desc: "The `expr` fragment specifier will accept more expressions in the 2024 edition. To keep the existing behavior, use the `expr_2021` fragment specifier.",
-
+            edition_lint_opts: None,
-error: the `dbg!` macro is intended as a debugging tool
+            report_in_external_macro: false,
-  --> tests/ui/dbg_macro/dbg_macro.rs:79:9
+            future_incompatible: Some(
-   |
+                FutureIncompatibleInfo {
-LL |         dbg!(2);
+                    reference: "Migration Guide <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/macro-fragment-specifiers.html>",
-   |         ^^^^^^^
+                    reason: EditionSemanticsChange(
-   |
+                        Edition2024,
-help: remove the invocation before committing it to a version control system
+                    ),
-   |
+                    explain_reason: true,
-LL |         2;
+                },
-   |         ~
+            ),
-
+            is_externally_loaded: false,
-error: the `dbg!` macro is intended as a debugging tool
+            feature_gate: None,
-  --> tests/ui/dbg_macro/dbg_macro.rs:86:5
+            crate_level_only: false,
-   |
+            eval_always: false,
-LL |     dbg!(1);
+        },
-   |     ^^^^^^^
+    },
-   |
+    LintId {
-help: remove the invocation before committing it to a version control system
+        lint: Lint {
-   |
+            name: "AMBIGUOUS_NEGATIVE_LITERALS",
-LL |     1;
+            default_level: Allow,
-   |     ~
+            desc: "ambiguous negative literals operations",
-
+            edition_lint_opts: None,
-error: the `dbg!` macro is intended as a debugging tool
+            report_in_external_macro: true,
-  --> tests/ui/dbg_macro/dbg_macro.rs:92:5
+            future_incompatible: None,
-   |
+            is_externally_loaded: false,
-LL |     dbg!(1);
+            feature_gate: None,
-   |     ^^^^^^^
+            crate_level_only: false,
-   |
+            eval_always: false,
-help: remove the invocation before committing it to a version control system
+        },
-   |
+    },
-LL |     1;
+    LintId {
-   |     ~
+        lint: Lint {
-
+            name: "VARIANT_SIZE_DIFFERENCES",
-error: the `dbg!` macro is intended as a debugging tool
+            default_level: Allow,
-  --> tests/ui/dbg_macro/dbg_macro.rs:99:9
+            desc: "detects enums with widely varying variant sizes",
-   |
+            edition_lint_opts: None,
-LL |         dbg!(1);
+            report_in_external_macro: false,
-   |         ^^^^^^^
+            future_incompatible: None,
-   |
+            is_externally_loaded: false,
-help: remove the invocation before committing it to a version control system
+            feature_gate: None,
-   |
+            crate_level_only: false,
-LL |         1;
+            eval_always: false,
-   |         ~
+        },
-
+    },
-error: the `dbg!` macro is intended as a debugging tool
+    LintId {
-  --> tests/ui/dbg_macro/dbg_macro.rs:106:31
+        lint: Lint {
-   |
+            name: "PATH_STATEMENTS",
-LL |         println!("dbg: {:?}", dbg!(s));
+            default_level: Warn,
-   |                               ^^^^^^^
+            desc: "path statements with no effect",
-   |
+            edition_lint_opts: None,
-help: remove the invocation before committing it to a version control system
+            report_in_external_macro: false,
-   |
+            future_incompatible: None,
-LL |         println!("dbg: {:?}", s);
+            is_externally_loaded: false,
-   |                               ~
+            feature_gate: None,
-
+            crate_level_only: false,
-error: the `dbg!` macro is intended as a debugging tool
+            eval_always: false,
-  --> tests/ui/dbg_macro/dbg_macro.rs:108:22
+        },
-   |
+    },
-LL |         print!("{}", dbg!(s));
+    LintId {
-   |                      ^^^^^^^
+        lint: Lint {
-   |
+            name: "LET_UNDERSCORE_DROP",
-help: remove the invocation before committing it to a version control system
+            default_level: Allow,
-   |
+            desc: "non-binding let on a type that has a destructor",
-LL |         print!("{}", s);
+            edition_lint_opts: None,
-   |                      ~
+            report_in_external_macro: false,
-
+            future_incompatible: None,
-error: aborting due to 19 previous errors
+            is_externally_loaded: false,
-
+            feature_gate: None,


error: actual output differed from expected
Execute `cargo uibless` to update `tests/ui/dbg_macro/dbg_macro.stdout` to the actual output
--- tests/ui/dbg_macro/dbg_macro.stdout
+++ <stdout output>
+[] is true
+[
+    Lint {
+        name: "clippy::ARITHMETIC_SIDE_EFFECTS",
+        default_level: Allow,
+        desc: "any arithmetic expression that can cause side effects like overflows or panics",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[] is true
+[] is true
+[
+    Lint {
+        name: "clippy::AWAIT_HOLDING_LOCK",
+        default_level: Warn,
+        desc: "inside an async function, holding a `MutexGuard` while calling `await`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::AWAIT_HOLDING_REFCELL_REF",
+        default_level: Warn,
+        desc: "inside an async function, holding a `RefCell` ref while calling `await`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::AWAIT_HOLDING_INVALID_TYPE",
+        default_level: Warn,
+        desc: "holding a type across an await point which is not allowed to be held as per the configuration",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::SERDE_API_MISUSE",
+        default_level: Deny,
+        desc: "various things that will negatively affect your serde experience",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::BOX_COLLECTION",
+        default_level: Warn,
+        desc: "usage of `Box<Vec<T>>`, vector elements are already on the heap",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::VEC_BOX",
+        default_level: Warn,
+        desc: "usage of `Vec<Box<T>>` where T: Sized, vector elements are already on the heap",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::OPTION_OPTION",
+        default_level: Allow,
+        desc: "usage of `Option<Option<T>>`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::LINKEDLIST",
+        default_level: Allow,
+        desc: "usage of LinkedList, usually a vector is faster, or a more specialized data structure like a `VecDeque`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::BORROWED_BOX",
+        default_level: Warn,
+        desc: "a borrow of a boxed type",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::REDUNDANT_ALLOCATION",
+        default_level: Warn,
+        desc: "redundant allocation",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::RC_BUFFER",
+        default_level: Allow,
+        desc: "shared ownership of a buffer type",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::RC_MUTEX",
+        default_level: Allow,
+        desc: "usage of `Rc<Mutex<T>>`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::TYPE_COMPLEXITY",
+        default_level: Warn,
+        desc: "usage of very complex types that might be better factored into `type` definitions",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::NONMINIMAL_BOOL",
+        default_level: Warn,
+        desc: "boolean expressions that can be written more concisely",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::OVERLY_COMPLEX_BOOL_EXPR",
+        default_level: Deny,
+        desc: "boolean expressions that contain terminals which can be eliminated",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::ENUM_CLIKE_UNPORTABLE_VARIANT",
+        default_level: Deny,
+        desc: "C-like enums that are `repr(isize/usize)` and have values that don't fit into an `i32`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::EXCESSIVE_PRECISION",
+        default_level: Warn,
+        desc: "excessive precision for float literal",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::LOSSY_FLOAT_LITERAL",
+        default_level: Allow,
+        desc: "lossy whole number float literals",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::PTR_ARG",
+        default_level: Warn,
+        desc: "fn arguments of the type `&Vec<...>` or `&String`, suggesting to use `&[...]` or `&str` instead, respectively",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::CMP_NULL",
+        default_level: Warn,
+        desc: "comparing a pointer to a null pointer, suggesting to use `.is_null()` instead",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::MUT_FROM_REF",
+        default_level: Deny,
+        desc: "fns that create mutable refs from immutable ref args",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::INVALID_NULL_PTR_USAGE",
+        default_level: Deny,
+        desc: "invalid usage of a null pointer, suggesting `NonNull::dangling()` instead",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::NEEDLESS_BOOL",
+        default_level: Warn,
+        desc: "if-statements with plain booleans in the then- and else-clause, e.g., `if p { true } else { false }`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::NEEDLESS_BOOL_ASSIGN",
+        default_level: Warn,
+        desc: "setting the same boolean variable in both branches of an if-statement",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::BOOL_COMPARISON",
+        default_level: Warn,
+        desc: "comparing a variable to a boolean, e.g., `if x == true` or `if x != true`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::NEEDLESS_FOR_EACH",
+        default_level: Allow,
+        desc: "using `for_each` where a `for` loop would be simpler",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::TOPLEVEL_REF_ARG",
+        default_level: Warn,
+        desc: "an entire binding declared as `ref`, in a function argument or a `let` statement",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::USED_UNDERSCORE_BINDING",
+        default_level: Allow,
+        desc: "using a binding which is prefixed with an underscore",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::USED_UNDERSCORE_ITEMS",
+        default_level: Allow,
+        desc: "using a item which is prefixed with an underscore",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::SHORT_CIRCUIT_STATEMENT",
+        default_level: Warn,
+        desc: "using a short circuit boolean condition as a statement",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::REDUNDANT_CLOSURE",
+        default_level: Warn,
+        desc: "redundant closures, i.e., `|a| foo(a)` (which can be written as just `foo`)",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::REDUNDANT_CLOSURE_FOR_METHOD_CALLS",
+        default_level: Allow,
+        desc: "redundant closures for method calls",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::MUT_MUT",
+        default_level: Allow,
+        desc: "usage of double-mut refs, e.g., `&mut &mut ...`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::UNNECESSARY_MUT_PASSED",
+        default_level: Warn,
+        desc: "an argument passed as a mutable reference although the callee only demands an immutable reference",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::SIGNIFICANT_DROP_TIGHTENING",
+        default_level: Allow,
+        desc: "Searches for elements marked with `#[clippy::has_significant_drop]` that could be early dropped but are in fact dropped at the end of their scopes",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::LEN_ZERO",
+        default_level: Warn,
+        desc: "checking `.len() == 0` or `.len() > 0` (or similar) when `.is_empty()` could be used instead",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::LEN_WITHOUT_IS_EMPTY",
+        default_level: Warn,
+        desc: "traits or impls with a public `len` method but no corresponding `is_empty` method",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::COMPARISON_TO_EMPTY",
+        default_level: Warn,
+        desc: "checking `x == \"\"` or `x == []` (or similar) when `.is_empty()` could be used instead",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::INLINE_ALWAYS",
+        default_level: Allow,
+        desc: "use of `#[inline(always)]`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::REPR_PACKED_WITHOUT_ABI",
+        default_level: Warn,
+        desc: "ensures that `repr(packed)` always comes with a qualified ABI",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::BLOCKS_IN_CONDITIONS",
+        default_level: Warn,
+        desc: "useless or complex blocks that can be eliminated in conditions",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::INVISIBLE_CHARACTERS",
+        default_level: Deny,
+        desc: "using an invisible character in a string literal, which is confusing",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::NON_ASCII_LITERAL",
+        default_level: Allow,
+        desc: "using any literal non-ASCII chars in a string literal instead of using the `\\u` escape",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::UNICODE_NOT_NFC",
+        default_level: Allow,
+        desc: "using a Unicode literal not in NFC normal form (see [Unicode tr15](http://www.unicode.org/reports/tr15/) for further information)",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::UNINIT_VEC",
+        default_level: Deny,
+        desc: "Vec with uninitialized data",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::UNIT_RETURN_EXPECTING_ORD",
+        default_level: Deny,
+        desc: "fn arguments of type Fn(...) -> Ord returning the unit type ().",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::STRING_ADD",
+        default_level: Allow,
+        desc: "using `x + ..` where x is a `String` instead of `push_str()`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::STRING_ADD_ASSIGN",
+        default_level: Allow,
+        desc: "using `x = x + ..` where x is a `String` instead of `push_str()`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::STRING_SLICE",
+        default_level: Allow,
+        desc: "slicing a string",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::IMPLICIT_RETURN",
+        default_level: Allow,
+        desc: "use a return statement like `return expr` instead of an expression",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::IMPLICIT_SATURATING_SUB",
+        default_level: Warn,
+        desc: "Perform saturating subtraction instead of implicitly checking lower bound of data type",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::INVERTED_SATURATING_SUB",
+        default_level: Deny,
+        desc: "Check if a variable is smaller than another one and still subtract from it even if smaller",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::DEFAULT_NUMERIC_FALLBACK",
+        default_level: Allow,
+        desc: "usage of unconstrained numeric literals which may cause default numeric fallback.",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::INCONSISTENT_STRUCT_CONSTRUCTOR",
+        default_level: Allow,
+        desc: "the order of the field init shorthand is inconsistent with the order in the struct definition",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::NON_OCTAL_UNIX_PERMISSIONS",
+        default_level: Deny,
+        desc: "use of non-octal value to set unix file permissions, which will be translated into octal",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::APPROX_CONSTANT",
+        default_level: Deny,
+        desc: "the approximate of a known float constant (in `std::fXX::consts`)",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::UNWRAP_USED",
+        default_level: Allow,
+        desc: "using `.unwrap()` on `Result` or `Option`, which should at least get a better message using `expect()`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::EXPECT_USED",
+        default_level: Allow,
+        desc: "using `.expect()` on `Result` or `Option`, which might be better handled",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::SHOULD_IMPLEMENT_TRAIT",
+        default_level: Warn,
+        desc: "defining a method that should be implementing a std trait",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::WRONG_SELF_CONVENTION",
+        default_level: Warn,
+        desc: "defining a method named with an established prefix (like \"into_\") that takes `self` with the wrong convention",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::OK_EXPECT",
+        default_level: Warn,
+        desc: "using `ok().expect()`, which gives worse error messages than calling `expect` directly on the Result",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::UNWRAP_OR_DEFAULT",
+        default_level: Warn,
+        desc: "using `.unwrap_or`, etc. with an argument that constructs a default value",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::MAP_UNWRAP_OR",
+        default_level: Allow,
+        desc: "using `.map(f).unwrap_or(a)` or `.map(f).unwrap_or_else(func)`, which are more succinctly expressed as `map_or(a, f)` or `map_or_else(a, f)`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::RESULT_MAP_OR_INTO_OPTION",
+        default_level: Warn,
+        desc: "using `Result.map_or(None, Some)`, which is more succinctly expressed as `ok()`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::OPTION_MAP_OR_NONE",
+        default_level: Warn,
+        desc: "using `Option.map_or(None, f)`, which is more succinctly expressed as `and_then(f)`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::BIND_INSTEAD_OF_MAP",
+        default_level: Warn,
+        desc: "using `Option.and_then(|x| Some(y))`, which is more succinctly expressed as `map(|x| y)`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::OR_FUN_CALL",
+        default_level: Allow,
+        desc: "using any `*or` method with a function call, which suggests `*or_else`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::OR_THEN_UNWRAP",
+        default_level: Warn,
+        desc: "checks for `.or(…).unwrap()` calls to Options and Results.",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::EXPECT_FUN_CALL",
+        default_level: Warn,
+        desc: "using any `expect` method with a function call",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::CHARS_NEXT_CMP",
+        default_level: Warn,
+        desc: "using `.chars().next()` to check if a string starts with a char",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::CHARS_LAST_CMP",
+        default_level: Warn,
+        desc: "using `.chars().last()` or `.chars().next_back()` to check if a string ends with a char",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::CLONE_ON_COPY",
+        default_level: Warn,
+        desc: "using `clone` on a `Copy` type",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::CLONE_ON_REF_PTR",
+        default_level: Allow,
+        desc: "using `clone` on a ref-counted pointer",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::COLLAPSIBLE_STR_REPLACE",
+        default_level: Warn,
+        desc: "collapse consecutive calls to str::replace (2 or more) into a single call",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::CONST_IS_EMPTY",
+        default_level: Warn,
+        desc: "is_empty() called on strings known at compile time",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::ITER_OVEREAGER_CLONED",
+        default_level: Warn,
+        desc: "using `cloned()` early with `Iterator::iter()` can lead to some performance inefficiencies",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::CLONED_INSTEAD_OF_COPIED",
+        default_level: Allow,
+        desc: "used `cloned` where `copied` could be used instead",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::FLAT_MAP_OPTION",
+        default_level: Allow,
+        desc: "used `flat_map` where `filter_map` could be used instead",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::INEFFICIENT_TO_STRING",
+        default_level: Allow,
+        desc: "using `to_string` on `&&T` where `T: ToString`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::NEW_RET_NO_SELF",
+        default_level: Warn,
+        desc: "not returning type containing `Self` in a `new` method",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::SINGLE_CHAR_ADD_STR",
+        default_level: Warn,
+        desc: "`push_str()` or `insert_str()` used with a single-character string literal as parameter",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::SEARCH_IS_SOME",
+        default_level: Warn,
+        desc: "using an iterator or string search followed by `is_some()` or `is_none()`, which is more succinctly expressed as a call to `any()` or `contains()` (with negation in case of `is_none()`)",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::FILTER_NEXT",
+        default_level: Warn,
+        desc: "using `filter(p).next()`, which is more succinctly expressed as `.find(p)`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::SKIP_WHILE_NEXT",
+        default_level: Warn,
+        desc: "using `skip_while(p).next()`, which is more succinctly expressed as `.find(!p)`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::FILTER_MAP_IDENTITY",
+        default_level: Warn,
+        desc: "call to `filter_map` where `flatten` is sufficient",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::MAP_IDENTITY",
+        default_level: Warn,
+        desc: "using iterator.map(|x| x)",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::MANUAL_FILTER_MAP",
+        default_level: Warn,
+        desc: "using `_.filter(_).map(_)` in a way that can be written more simply as `filter_map(_)`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::MANUAL_FIND_MAP",
+        default_level: Warn,
+        desc: "using `_.find(_).map(_)` in a way that can be written more simply as `find_map(_)`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::OPTION_FILTER_MAP",
+        default_level: Warn,
+        desc: "filtering `Option` for `Some` then force-unwrapping, which can be one type-safe operation",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::FILTER_MAP_NEXT",
+        default_level: Allow,
+        desc: "using combination of `filter_map` and `next` which can usually be written as a single method call",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::FLAT_MAP_IDENTITY",
+        default_level: Warn,
+        desc: "call to `flat_map` where `flatten` is sufficient",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::MAP_FLATTEN",
+        default_level: Warn,
+        desc: "using combinations of `flatten` and `map` which can usually be written as a single method call",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::ITERATOR_STEP_BY_ZERO",
+        default_level: Deny,
+        desc: "using `Iterator::step_by(0)`, which will panic at runtime",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::ITER_NEXT_SLICE",
+        default_level: Warn,
+        desc: "using `.iter().next()` on a sliced array, which can be shortened to just `.get()`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::ITER_COUNT",
+        default_level: Warn,
+        desc: "replace `.iter().count()` with `.len()`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::ITER_NTH",
+        default_level: Warn,
+        desc: "using `.iter().nth()` on a standard library type with O(1) element access",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::ITER_NTH_ZERO",
+        default_level: Warn,
+        desc: "replace `iter.nth(0)` with `iter.next()`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::BYTES_NTH",
+        default_level: Warn,
+        desc: "replace `.bytes().nth()` with `.as_bytes().get()`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::ITER_SKIP_NEXT",
+        default_level: Warn,
+        desc: "using `.skip(x).next()` on an iterator",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::GET_UNWRAP",
+        default_level: Allow,
+        desc: "using `.get().unwrap()` or `.get_mut().unwrap()` when using `[]` would work instead",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::GET_LAST_WITH_LEN",
+        default_level: Warn,
+        desc: "Using `x.get(x.len() - 1)` when `x.last()` is correct and simpler",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::STRING_EXTEND_CHARS",
+        default_level: Warn,
+        desc: "using `x.extend(s.chars())` where s is a `&str` or `String`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::ITER_CLONED_COLLECT",
+        default_level: Warn,
+        desc: "using `.cloned().collect()` on slice to create a `Vec`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::ITER_WITH_DRAIN",
+        default_level: Allow,
+        desc: "replace `.drain(..)` with `.into_iter()`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::TYPE_ID_ON_BOX",
+        default_level: Warn,
+        desc: "calling `.type_id()` on a boxed trait object",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::USELESS_ASREF",
+        default_level: Warn,
+        desc: "using `as_ref` where the types before and after the call are the same",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::UNNECESSARY_FOLD",
+        default_level: Warn,
+        desc: "using `fold` when a more succinct alternative exists",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::UNNECESSARY_FILTER_MAP",
+        default_level: Warn,
+        desc: "using `filter_map` when a more succinct alternative exists",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::UNNECESSARY_FIND_MAP",
+        default_level: Warn,
+        desc: "using `find_map` when a more succinct alternative exists",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::INTO_ITER_ON_REF",
+        default_level: Warn,
+        desc: "using `.into_iter()` on a reference",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::SUSPICIOUS_MAP",
+        default_level: Warn,
+        desc: "suspicious usage of map",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::UNINIT_ASSUMED_INIT",
+        default_level: Deny,
+        desc: "`MaybeUninit::uninit().assume_init()`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::MANUAL_SATURATING_ARITHMETIC",
+        default_level: Warn,
+        desc: "`.checked_add/sub(x).unwrap_or(MAX/MIN)`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::ZST_OFFSET",
+        default_level: Deny,
+        desc: "Check for offset calculations on raw pointers to zero-sized types",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::FILETYPE_IS_FILE",
+        default_level: Allow,
+        desc: "`FileType::is_file` is not recommended to test for readable file type",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::OPTION_AS_REF_DEREF",
+        default_level: Warn,
+        desc: "using `as_ref().map(Deref::deref)`, which is more succinctly expressed as `as_deref()`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::UNNECESSARY_LAZY_EVALUATIONS",
+        default_level: Warn,
+        desc: "using unnecessary lazy evaluation, which can be replaced with simpler eager evaluation",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::MAP_COLLECT_RESULT_UNIT",
+        default_level: Warn,
+        desc: "using `.map(_).collect::<Result<(),_>()`, which can be replaced with `try_for_each`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::FROM_ITER_INSTEAD_OF_COLLECT",
+        default_level: Allow,
+        desc: "use `.collect()` instead of `::from_iter()`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::INSPECT_FOR_EACH",
+        default_level: Warn,
+        desc: "using `.inspect().for_each()`, which can be replaced with `.for_each()`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::IMPLICIT_CLONE",
+        default_level: Allow,
+        desc: "implicitly cloning a value by invoking a function on its dereferenced type",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::SUSPICIOUS_TO_OWNED",
+        default_level: Warn,
+        desc: "calls to `to_owned` on a `Cow<'_, _>` might not do what they are expected",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::SUSPICIOUS_SPLITN",
+        default_level: Deny,
+        desc: "checks for `.splitn(0, ..)` and `.splitn(1, ..)`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::MANUAL_STR_REPEAT",
+        default_level: Warn,
+        desc: "manual implementation of `str::repeat`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::EXTEND_WITH_DRAIN",
+        default_level: Warn,
+        desc: "using vec.append(&mut vec) to move the full range of a vector to another",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::MANUAL_SPLIT_ONCE",
+        default_level: Warn,
+        desc: "replace `.splitn(2, pat)` with `.split_once(pat)`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::NEEDLESS_SPLITN",
+        default_level: Warn,
+        desc: "usages of `str::splitn` that can be replaced with `str::split`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::UNNECESSARY_TO_OWNED",
+        default_level: Warn,
+        desc: "unnecessary calls to `to_owned`-like functions",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::UNNECESSARY_JOIN",
+        default_level: Allow,
+        desc: "using `.collect::<Vec<String>>().join(\"\")` on an iterator",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::ERR_EXPECT",
+        default_level: Warn,
+        desc: "using `.err().expect(\"\")` when `.expect_err(\"\")` can be used",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::NEEDLESS_OPTION_AS_DEREF",
+        default_level: Warn,
+        desc: "no-op use of `deref` or `deref_mut` method to `Option`.",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::IS_DIGIT_ASCII_RADIX",
+        default_level: Warn,
+        desc: "use of `char::is_digit(..)` with literal radix of 10 or 16",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::NEEDLESS_OPTION_TAKE",
+        default_level: Warn,
+        desc: "using `.as_ref().take()` on a temporary value",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::NO_EFFECT_REPLACE",
+        default_level: Warn,
+        desc: "replace with no effect",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::OBFUSCATED_IF_ELSE",
+        default_level: Warn,
+        desc: "use of `.then_some(..).unwrap_or(..)` can be written more clearly with `if .. else ..`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::ITER_ON_SINGLE_ITEMS",
+        default_level: Allow,
+        desc: "Iterator for array of length 1",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::ITER_ON_EMPTY_COLLECTIONS",
+        default_level: Allow,
+        desc: "Iterator for empty array",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::NAIVE_BYTECOUNT",
+        default_level: Allow,
+        desc: "use of naive `<slice>.filter(|&x| x == y).count()` to count byte values",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::BYTES_COUNT_TO_LEN",
+        default_level: Warn,
+        desc: "Using `bytes().count()` when `len()` performs the same functionality",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::CASE_SENSITIVE_FILE_EXTENSION_COMPARISONS",
+        default_level: Allow,
+        desc: "Checks for calls to ends_with with case-sensitive file extensions",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::GET_FIRST",
+        default_level: Warn,
+        desc: "Using `x.get(0)` when `x.first()` or `x.front()` is simpler",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::MANUAL_OK_OR",
+        default_level: Allow,
+        desc: "finds patterns that can be encoded more concisely with `Option::ok_or`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::MAP_CLONE",
+        default_level: Warn,
+        desc: "using `iterator.map(|x| x.clone())`, or dereferencing closures for `Copy` types",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::MAP_ERR_IGNORE",
+        default_level: Allow,
+        desc: "`map_err` should not ignore the original error",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::MUT_MUTEX_LOCK",
+        default_level: Warn,
+        desc: "`&mut Mutex::lock` does unnecessary locking",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::NONSENSICAL_OPEN_OPTIONS",
+        default_level: Deny,
+        desc: "nonsensical combination of options for opening a file",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::SUSPICIOUS_OPEN_OPTIONS",
+        default_level: Warn,
+        desc: "suspicious combination of options for opening a file",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::PATH_BUF_PUSH_OVERWRITE",
+        default_level: Allow,
+        desc: "calling `push` with file system root on `PathBuf` can overwrite it",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::RANGE_ZIP_WITH_LEN",
+        default_level: Warn,
+        desc: "zipping iterator with a range when `enumerate()` would do",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::REPEAT_ONCE",
+        default_level: Warn,
+        desc: "using `.repeat(1)` instead of `String.clone()`, `str.to_string()` or `slice.to_vec()` ",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::STABLE_SORT_PRIMITIVE",
+        default_level: Allow,
+        desc: "use of sort() when sort_unstable() is equivalent",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::UNIT_HASH",
+        default_level: Deny,
+        desc: "hashing a unit value, which does nothing",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::READ_LINE_WITHOUT_TRIM",
+        default_level: Deny,
+        desc: "calling `Stdin::read_line`, then trying to parse it without first trimming",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::UNNECESSARY_SORT_BY",
+        default_level: Warn,
+        desc: "Use of `Vec::sort_by` when `Vec::sort_by_key` or `Vec::sort` would be clearer",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::VEC_RESIZE_TO_ZERO",
+        default_level: Deny,
+        desc: "emptying a vector with `resize(0, an_int)` instead of `clear()` is probably an argument inversion mistake",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::VERBOSE_FILE_READS",
+        default_level: Allow,
+        desc: "use of `File::read_to_end` or `File::read_to_string`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::ITER_KV_MAP",
+        default_level: Warn,
+        desc: "iterating on map using `iter` when `keys` or `values` would do",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::SEEK_FROM_CURRENT",
+        default_level: Warn,
+        desc: "use dedicated method for seek from current position",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::SEEK_TO_START_INSTEAD_OF_REWIND",
+        default_level: Warn,
+        desc: "jumping to the start of stream using `seek` method",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::NEEDLESS_COLLECT",
+        default_level: Allow,
+        desc: "collecting an iterator when collect is not needed",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::SUSPICIOUS_COMMAND_ARG_SPACE",
+        default_level: Warn,
+        desc: "single command line argument that looks like it should be multiple arguments",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::CLEAR_WITH_DRAIN",
+        default_level: Allow,
+        desc: "calling `drain` in order to `clear` a container",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::MANUAL_NEXT_BACK",
+        default_level: Warn,
+        desc: "manual reverse iteration of `DoubleEndedIterator`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::UNNECESSARY_LITERAL_UNWRAP",
+        default_level: Warn,
+        desc: "using `unwrap()` related calls on `Result` and `Option` constructors",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::DRAIN_COLLECT",
+        default_level: Warn,
+        desc: "calling `.drain(..).collect()` to move all elements into a new collection",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::MANUAL_TRY_FOLD",
+        default_level: Warn,
+        desc: "checks for usage of `Iterator::fold` with a type that implements `Try`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::FORMAT_COLLECT",
+        default_level: Warn,
+        desc: "`format!`ing every element in a collection, then collecting the strings into a new `String`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::STRING_LIT_CHARS_ANY",
+        default_level: Allow,
+        desc: "checks for `<string_lit>.chars().any(|i| i == c)`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::ITER_SKIP_ZERO",
+        default_level: Deny,
+        desc: "disallows `.skip(0)`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::FILTER_MAP_BOOL_THEN",
+        default_level: Warn,
+        desc: "checks for usage of `bool::then` in `Iterator::filter_map`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::READONLY_WRITE_LOCK",
+        default_level: Warn,
+        desc: "acquiring a write lock when a read lock would work",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::ITER_OUT_OF_BOUNDS",
+        default_level: Warn,
+        desc: "calls to `.take()` or `.skip()` that are out of bounds",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::PATH_ENDS_WITH_EXT",
+        default_level: Warn,
+        desc: "attempting to compare file extensions using `Path::ends_with`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::REDUNDANT_AS_STR",
+        default_level: Warn,
+        desc: "`as_str` used to call a method on `str` that is also available on `String`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::WAKER_CLONE_WAKE",
+        default_level: Warn,
+        desc: "cloning a `Waker` only to wake it",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::UNNECESSARY_FALLIBLE_CONVERSIONS",
+        default_level: Warn,
+        desc: "calling the `try_from` and `try_into` trait methods when `From`/`Into` is implemented",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::JOIN_ABSOLUTE_PATHS",
+        default_level: Warn,
+        desc: "calls to `Path::join` which will overwrite the original path",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::OPTION_MAP_OR_ERR_OK",
+        default_level: Warn,
+        desc: "using `Option.map_or(Err(_), Ok)`, which is more succinctly expressed as `Option.ok_or(_)`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::RESULT_FILTER_MAP",
+        default_level: Warn,
+        desc: "filtering `Result` for `Ok` then force-unwrapping, which can be one type-safe operation",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::ITER_FILTER_IS_SOME",
+        default_level: Allow,
+        desc: "filtering an iterator over `Option`s for `Some` can be achieved with `flatten`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::ITER_FILTER_IS_OK",
+        default_level: Allow,
+        desc: "filtering an iterator over `Result`s for `Ok` can be achieved with `flatten`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::MANUAL_IS_VARIANT_AND",
+        default_level: Allow,
+        desc: "using `.map(f).unwrap_or_default()`, which is more succinctly expressed as `is_some_and(f)` or `is_ok_and(f)`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::STR_SPLIT_AT_NEWLINE",
+        default_level: Allow,
+        desc: "splitting a trimmed string at hard-coded newlines",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::OPTION_AS_REF_CLONED",
+        default_level: Allow,
+        desc: "cloning an `Option` via `as_ref().cloned()`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::UNNECESSARY_RESULT_MAP_OR_ELSE",
+        default_level: Warn,
+        desc: "making no use of the \"map closure\" when calling `.map_or_else(|err| handle_error(err), |n| n)`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::MANUAL_C_STR_LITERALS",
+        default_level: Warn,
+        desc: "creating a `CStr` through functions when `c\"\"` literals can be used",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::UNNECESSARY_GET_THEN_CHECK",
+        default_level: Warn,
+        desc: "calling `.get().is_some()` or `.get().is_none()` instead of `.contains()` or `.contains_key()`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::UNNECESSARY_FIRST_THEN_CHECK",
+        default_level: Warn,
+        desc: "calling `.first().is_some()` or `.first().is_none()` instead of `.is_empty()`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::NEEDLESS_CHARACTER_ITERATION",
+        default_level: Warn,
+        desc: "is_ascii() called on a char iterator",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::MANUAL_INSPECT",
+        default_level: Warn,
+        desc: "use of `map` returning the original item",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::UNNECESSARY_MIN_OR_MAX",
+        default_level: Warn,
+        desc: "using 'min()/max()' when there is no need for it",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::NEEDLESS_AS_BYTES",
+        default_level: Warn,
+        desc: "detect useless calls to `as_bytes()`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::MAP_ALL_ANY_IDENTITY",
+        default_level: Warn,
+        desc: "combine `.map(_)` followed by `.all(identity)`/`.any(identity)` into a single call",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::MAP_WITH_UNUSED_ARGUMENT_OVER_RANGES",
+        default_level: Allow,
+        desc: "map of a trivial closure (not dependent on parameter) over a range",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::UNNECESSARY_MAP_OR",
+        default_level: Warn,
+        desc: "reduce unnecessary calls to `.map_or(bool, …)`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::SINGLE_MATCH",
+        default_level: Warn,
+        desc: "a `match` statement with a single nontrivial arm (i.e., where the other arm is `_ => {}`) instead of `if let`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::MATCH_REF_PATS",
+        default_level: Warn,
+        desc: "a `match` or `if let` with all arms prefixed with `&` instead of deref-ing the match expression",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::MATCH_BOOL",
+        default_level: Allow,
+        desc: "a `match` on a boolean expression instead of an `if..else` block",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::SINGLE_MATCH_ELSE",
+        default_level: Allow,
+        desc: "a `match` statement with two arms where the second arm's pattern is a placeholder instead of a specific match pattern",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::MATCH_OVERLAPPING_ARM",
+        default_level: Warn,
+        desc: "a `match` with overlapping arms",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::MATCH_WILD_ERR_ARM",
+        default_level: Allow,
+        desc: "a `match` with `Err(_)` arm and take drastic actions",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::MATCH_AS_REF",
+        default_level: Warn,
+        desc: "a `match` on an Option value instead of using `as_ref()` or `as_mut`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::WILDCARD_ENUM_MATCH_ARM",
+        default_level: Allow,
+        desc: "a wildcard enum match arm using `_`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::MATCH_WILDCARD_FOR_SINGLE_VARIANTS",
+        default_level: Allow,
+        desc: "a wildcard enum match for a single variant",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::WILDCARD_IN_OR_PATTERNS",
+        default_level: Warn,
+        desc: "a wildcard pattern used with others patterns in same match arm",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::MATCH_SINGLE_BINDING",
+        default_level: Warn,
+        desc: "a match with a single binding instead of using `let` statement",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::INFALLIBLE_DESTRUCTURING_MATCH",
+        default_level: Warn,
+        desc: "a `match` statement with a single infallible arm instead of a `let`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::REST_PAT_IN_FULLY_BOUND_STRUCTS",
+        default_level: Allow,
+        desc: "a match on a struct that binds all fields but still uses the wildcard pattern",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::REDUNDANT_PATTERN_MATCHING",
+        default_level: Warn,
+        desc: "use the proper utility function avoiding an `if let`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::MATCH_LIKE_MATCHES_MACRO",
+        default_level: Warn,
+        desc: "a match that could be written with the matches! macro",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::MATCH_SAME_ARMS",
+        default_level: Allow,
+        desc: "`match` with identical arm bodies",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::NEEDLESS_MATCH",
+        default_level: Warn,
+        desc: "`match` or match-like `if let` that are unnecessary",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::COLLAPSIBLE_MATCH",
+        default_level: Warn,
+        desc: "Nested `match` or `if let` expressions where the patterns may be \"collapsed\" together.",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::MANUAL_UNWRAP_OR",
+        default_level: Warn,
+        desc: "finds patterns that can be encoded more concisely with `Option::unwrap_or` or `Result::unwrap_or`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::MATCH_ON_VEC_ITEMS",
+        default_level: Allow,
+        desc: "matching on vector elements can panic",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::MATCH_STR_CASE_MISMATCH",
+        default_level: Deny,
+        desc: "creation of a case altering match expression with non-compliant arms",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::SIGNIFICANT_DROP_IN_SCRUTINEE",
+        default_level: Allow,
+        desc: "warns when a temporary of a type with a drop with a significant side-effect might have a surprising lifetime",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::TRY_ERR",
+        default_level: Allow,
+        desc: "return errors explicitly rather than hiding them behind a `?`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::MANUAL_MAP",
+        default_level: Warn,
+        desc: "reimplementation of `map`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::MANUAL_FILTER",
+        default_level: Warn,
+        desc: "reimplementation of `filter`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::REDUNDANT_GUARDS",
+        default_level: Warn,
+        desc: "checks for unnecessary guards in match expressions",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::MANUAL_NON_EXHAUSTIVE",
+        default_level: Warn,
+        desc: "manual implementations of the non-exhaustive pattern can be simplified using #[non_exhaustive]",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::MANUAL_STRIP",
+        default_level: Warn,
+        desc: "suggests using `strip_{prefix,suffix}` over `str::{starts,ends}_with` and slicing",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::CHECKED_CONVERSIONS",
+        default_level: Allow,
+        desc: "`try_from` could replace manual bounds checking when casting",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::MEM_REPLACE_OPTION_WITH_NONE",
+        default_level: Warn,
+        desc: "replacing an `Option` with `None` instead of `take()`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::MEM_REPLACE_WITH_UNINIT",
+        default_level: Deny,
+        desc: "`mem::replace(&mut _, mem::uninitialized())` or `mem::replace(&mut _, mem::zeroed())`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::MEM_REPLACE_WITH_DEFAULT",
+        default_level: Warn,
+        desc: "replacing a value of type `T` with `T::default()` instead of using `std::mem::take`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::RANGE_PLUS_ONE",
+        default_level: Allow,
+        desc: "`x..(y+1)` reads better as `x..=y`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::RANGE_MINUS_ONE",
+        default_level: Allow,
+        desc: "`x..=(y-1)` reads better as `x..y`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::REVERSED_EMPTY_RANGES",
+        default_level: Deny,
+        desc: "reversing the limits of range expressions, resulting in empty ranges",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::MANUAL_RANGE_CONTAINS",
+        default_level: Warn,
+        desc: "manually reimplementing {`Range`, `RangeInclusive`}`::contains`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::FROM_OVER_INTO",
+        default_level: Warn,
+        desc: "Warns on implementations of `Into<..>` to use `From<..>`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::USE_SELF",
+        default_level: Allow,
+        desc: "unnecessary structure name repetition whereas `Self` is applicable",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::MISSING_CONST_FOR_FN",
+        default_level: Allow,
+        desc: "Lint functions definitions that could be made `const fn`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::NEEDLESS_QUESTION_MARK",
+        default_level: Warn,
+        desc: "Suggest `value.inner_option` instead of `Some(value.inner_option?)`. The same goes for `Result<T, E>`.",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::CAST_PRECISION_LOSS",
+        default_level: Allow,
+        desc: "casts that cause loss of precision, e.g., `x as f32` where `x: u64`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::CAST_SIGN_LOSS",
+        default_level: Allow,
+        desc: "casts from signed types to unsigned types, e.g., `x as u32` where `x: i32`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::CAST_POSSIBLE_TRUNCATION",
+        default_level: Allow,
+        desc: "casts that may cause truncation of the value, e.g., `x as u8` where `x: u32`, or `x as i32` where `x: f32`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::CAST_POSSIBLE_WRAP",
+        default_level: Allow,
+        desc: "casts that may cause wrapping around the value, e.g., `x as i32` where `x: u32` and `x > i32::MAX`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::CAST_LOSSLESS",
+        default_level: Allow,
+        desc: "casts using `as` that are known to be lossless, e.g., `x as u64` where `x: u8`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::CAST_PTR_ALIGNMENT",
+        default_level: Allow,
+        desc: "cast from a pointer to a more strictly aligned pointer",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::CAST_SLICE_DIFFERENT_SIZES",
+        default_level: Deny,
+        desc: "casting using `as` between raw pointers to slices of types with different sizes",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::UNNECESSARY_CAST",
+        default_level: Warn,
+        desc: "cast to the same type, e.g., `x as i32` where `x: i32`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::FN_TO_NUMERIC_CAST_ANY",
+        default_level: Allow,
+        desc: "casting a function pointer to any integer type",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::FN_TO_NUMERIC_CAST",
+        default_level: Warn,
+        desc: "casting a function pointer to a numeric type other than `usize`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::FN_TO_NUMERIC_CAST_WITH_TRUNCATION",
+        default_level: Warn,
+        desc: "casting a function pointer to a numeric type not wide enough to store the address",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::CHAR_LIT_AS_U8",
+        default_level: Warn,
+        desc: "casting a character literal to `u8` truncates",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::PTR_AS_PTR",
+        default_level: Allow,
+        desc: "casting using `as` between raw pointers that doesn't change their constness, where `pointer::cast` could take the place of `as`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::PTR_CAST_CONSTNESS",
+        default_level: Allow,
+        desc: "casting using `as` on raw pointers to change constness when specialized methods apply",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::CAST_ENUM_TRUNCATION",
+        default_level: Warn,
+        desc: "casts from an enum type to an integral type that will truncate the value",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::CAST_ENUM_CONSTRUCTOR",
+        default_level: Warn,
+        desc: "casts from an enum tuple constructor to an integer",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::CAST_ABS_TO_UNSIGNED",
+        default_level: Warn,
+        desc: "casting the result of `abs()` to an unsigned integer can panic",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::AS_UNDERSCORE",
+        default_level: Allow,
+        desc: "detects `as _` conversion",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::BORROW_AS_PTR",
+        default_level: Allow,
+        desc: "borrowing just to cast to a raw pointer",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::CAST_SLICE_FROM_RAW_PARTS",
+        default_level: Warn,
+        desc: "casting a slice created from a pointer and length to a slice pointer",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::AS_PTR_CAST_MUT",
+        default_level: Allow,
+        desc: "casting the result of the `&self`-taking `as_ptr` to a mutable pointer",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::CAST_NAN_TO_INT",
+        default_level: Warn,
+        desc: "casting a known floating-point NaN into an integer",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::ZERO_PTR",
+        default_level: Warn,
+        desc: "using `0 as *{const, mut} T`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::REF_AS_PTR",
+        default_level: Allow,
+        desc: "using `as` to cast a reference to pointer",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::AS_POINTER_UNDERSCORE",
+        default_level: Allow,
+        desc: "detects `as *mut _` and `as *const _` conversion",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::SIZE_OF_IN_ELEMENT_COUNT",
+        default_level: Deny,
+        desc: "using `size_of::<T>` or `size_of_val::<T>` where a count of elements of `T` is expected",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::SAME_NAME_METHOD",
+        default_level: Allow,
+        desc: "two method with same name",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::INDEX_REFUTABLE_SLICE",
+        default_level: Allow,
+        desc: "avoid indexing on slices which could be destructed",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::SHADOW_SAME",
+        default_level: Allow,
+        desc: "rebinding a name to itself, e.g., `let mut x = &mut x`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::SHADOW_REUSE",
+        default_level: Allow,
+        desc: "rebinding a name to an expression that re-uses the original value, e.g., `let x = x + 1`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::SHADOW_UNRELATED",
+        default_level: Allow,
+        desc: "rebinding a name without even using the original value",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::LET_UNIT_VALUE",
+        default_level: Warn,
+        desc: "creating a `let` binding to a value of unit type, which usually can't be used afterwards",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::UNIT_CMP",
+        default_level: Deny,
+        desc: "comparing unit values",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::UNIT_ARG",
+        default_level: Warn,
+        desc: "passing unit to a function",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::MANUAL_MEMCPY",
+        default_level: Warn,
+        desc: "manually copying items between slices",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::MANUAL_FLATTEN",
+        default_level: Warn,
+        desc: "for loops over `Option`s or `Result`s with a single expression can be simplified",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::NEEDLESS_RANGE_LOOP",
+        default_level: Warn,
+        desc: "for-looping over a range of indices where an iterator over items would do",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::EXPLICIT_ITER_LOOP",
+        default_level: Allow,
+        desc: "for-looping over `_.iter()` or `_.iter_mut()` when `&_` or `&mut _` would do",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::EXPLICIT_INTO_ITER_LOOP",
+        default_level: Allow,
+        desc: "for-looping over `_.into_iter()` when `_` would do",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::ITER_NEXT_LOOP",
+        default_level: Deny,
+        desc: "for-looping over `_.next()` which is probably not intended",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::WHILE_LET_LOOP",
+        default_level: Warn,
+        desc: "`loop { if let { ... } else break }`, which can be written as a `while let` loop",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::EXPLICIT_COUNTER_LOOP",
+        default_level: Warn,
+        desc: "for-looping with an explicit counter when `_.enumerate()` would do",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::EMPTY_LOOP",
+        default_level: Warn,
+        desc: "empty `loop {}`, which should block or sleep",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::WHILE_LET_ON_ITERATOR",
+        default_level: Warn,
+        desc: "using a `while let` loop instead of a for loop on an iterator",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::FOR_KV_MAP",
+        default_level: Warn,
+        desc: "looping on a map using `iter` when `keys` or `values` would do",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::NEVER_LOOP",
+        default_level: Deny,
+        desc: "any loop that will always `break` or `return`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::MUT_RANGE_BOUND",
+        default_level: Warn,
+        desc: "for loop over a range where one of the bounds is a mutable variable",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::WHILE_IMMUTABLE_CONDITION",
+        default_level: Deny,
+        desc: "variables used within while expression are not mutated in the body",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::WHILE_FLOAT",
+        default_level: Allow,
+        desc: "while loops comparing floating point values",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::SAME_ITEM_PUSH",
+        default_level: Warn,
+        desc: "the same item is pushed inside of a for loop",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::SINGLE_ELEMENT_LOOP",
+        default_level: Warn,
+        desc: "there is no reason to have a single element loop",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::MISSING_SPIN_LOOP",
+        default_level: Warn,
+        desc: "An empty busy waiting loop",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::MANUAL_FIND",
+        default_level: Warn,
+        desc: "manual implementation of `Iterator::find`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::MANUAL_WHILE_LET_SOME",
+        default_level: Warn,
+        desc: "checking for emptiness of a `Vec` in the loop condition and popping an element in the body",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::UNUSED_ENUMERATE_INDEX",
+        default_level: Warn,
+        desc: "using `.enumerate()` and immediately dropping the index",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::INFINITE_LOOP",
+        default_level: Allow,
+        desc: "possibly unintended infinite loop",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::MAIN_RECURSION",
+        default_level: Warn,
+        desc: "recursion using the entrypoint",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::NEEDLESS_LIFETIMES",
+        default_level: Warn,
+        desc: "using explicit lifetimes for references in function arguments when elision rules would allow omitting them",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::EXTRA_UNUSED_LIFETIMES",
+        default_level: Warn,
+        desc: "unused lifetimes in function definitions",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::MAP_ENTRY",
+        default_level: Warn,
+        desc: "use of `contains_key` followed by `insert` on a `HashMap` or `BTreeMap`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::MIN_MAX",
+        default_level: Deny,
+        desc: "`min(_, max(_, _))` (or vice versa) with bounds clamping the result to a constant",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::ZERO_DIVIDED_BY_ZERO",
+        default_level: Warn,
+        desc: "usage of `0.0 / 0.0` to obtain NaN instead of `f32::NAN` or `f64::NAN`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::MUTEX_ATOMIC",
+        default_level: Allow,
+        desc: "using a mutex where an atomic value could be used instead.",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::MUTEX_INTEGER",
+        default_level: Allow,
+        desc: "using a mutex for an integer type",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::NEEDLESS_UPDATE",
+        default_level: Warn,
+        desc: "using `Foo { ..base }` when there are no missing fields",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::NEEDLESS_BORROWED_REFERENCE",
+        default_level: Warn,
+        desc: "destructuring a reference and borrowing the inner value",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::BORROW_DEREF_REF",
+        default_level: Warn,
+        desc: "deref on an immutable reference returns the same type as itself",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::NO_EFFECT",
+        default_level: Warn,
+        desc: "statements with no effect",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::UNNECESSARY_OPERATION",
+        default_level: Warn,
+        desc: "outer expressions with no effect",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::NO_EFFECT_UNDERSCORE_BINDING",
+        default_level: Allow,
+        desc: "binding to `_` prefixed variable with no side-effect",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::TEMPORARY_ASSIGNMENT",
+        default_level: Warn,
+        desc: "assignments to temporaries",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::CROSSPOINTER_TRANSMUTE",
+        default_level: Warn,
+        desc: "transmutes that have to or from types that are a pointer to the other",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::TRANSMUTE_PTR_TO_REF",
+        default_level: Warn,
+        desc: "transmutes from a pointer to a reference type",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::TRANSMUTE_PTR_TO_PTR",
+        default_level: Allow,
+        desc: "transmutes from a pointer to a pointer / a reference to a reference",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::USELESS_TRANSMUTE",
+        default_level: Warn,
+        desc: "transmutes that have the same to and from types or could be a cast/coercion",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::WRONG_TRANSMUTE",
+        default_level: Deny,
+        desc: "transmutes that are confusing at best, undefined behavior at worst and always useless",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::TRANSMUTE_INT_TO_CHAR",
+        default_level: Warn,
+        desc: "transmutes from an integer to a `char`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::TRANSMUTE_BYTES_TO_STR",
+        default_level: Warn,
+        desc: "transmutes from a `&[u8]` to a `&str`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::TRANSMUTE_INT_TO_BOOL",
+        default_level: Warn,
+        desc: "transmutes from an integer to a `bool`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::TRANSMUTE_INT_TO_FLOAT",
+        default_level: Warn,
+        desc: "transmutes from an integer to a float",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::TRANSMUTE_INT_TO_NON_ZERO",
+        default_level: Warn,
+        desc: "transmutes from an integer to a non-zero wrapper",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::TRANSMUTE_FLOAT_TO_INT",
+        default_level: Warn,
+        desc: "transmutes from a float to an integer",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::TRANSMUTE_NUM_TO_BYTES",
+        default_level: Warn,
+        desc: "transmutes from a number to an array of `u8`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::UNSOUND_COLLECTION_TRANSMUTE",
+        default_level: Deny,
+        desc: "transmute between collections of layout-incompatible types",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::TRANSMUTES_EXPRESSIBLE_AS_PTR_CASTS",
+        default_level: Warn,
+        desc: "transmutes that could be a pointer cast",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::TRANSMUTE_UNDEFINED_REPR",
+        default_level: Allow,
+        desc: "transmute to or from a type with an undefined representation",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::TRANSMUTING_NULL",
+        default_level: Deny,
+        desc: "transmutes from a null pointer to a reference, which is undefined behavior",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::TRANSMUTE_NULL_TO_FN",
+        default_level: Deny,
+        desc: "transmute results in a null function pointer, which is undefined behavior",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::EAGER_TRANSMUTE",
+        default_level: Deny,
+        desc: "eager evaluation of `transmute`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::MISSING_TRANSMUTE_ANNOTATIONS",
+        default_level: Warn,
+        desc: "warns if a transmute call doesn't have all generics specified",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::COGNITIVE_COMPLEXITY",
+        default_level: Allow,
+        desc: "functions that should be split up into multiple functions",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: true,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::BOXED_LOCAL",
+        default_level: Warn,
+        desc: "using `Box<T>` where unnecessary",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::USELESS_VEC",
+        default_level: Warn,
+        desc: "useless `vec!`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::UNIMPLEMENTED",
+        default_level: Allow,
+        desc: "`unimplemented!` should not be present in production code",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::UNREACHABLE",
+        default_level: Allow,
+        desc: "usage of the `unreachable!` macro",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::TODO",
+        default_level: Allow,
+        desc: "`todo!` should not be present in production code",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::PANIC",
+        default_level: Allow,
+        desc: "usage of the `panic!` macro",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::STRING_LIT_AS_BYTES",
+        default_level: Allow,
+        desc: "calling `as_bytes` on a string literal instead of using a byte string literal",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::STRING_FROM_UTF8_AS_BYTES",
+        default_level: Warn,
+        desc: "casting string slices to byte slices and back",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::EXPL_IMPL_CLONE_ON_COPY",
+        default_level: Allow,
+        desc: "implementing `Clone` explicitly on `Copy` types",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::DERIVED_HASH_WITH_MANUAL_EQ",
+        default_level: Deny,
+        desc: "deriving `Hash` but implementing `PartialEq` explicitly",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::DERIVE_ORD_XOR_PARTIAL_ORD",
+        default_level: Deny,
+        desc: "deriving `Ord` but implementing `PartialOrd` explicitly",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::UNSAFE_DERIVE_DESERIALIZE",
+        default_level: Allow,
+        desc: "deriving `serde::Deserialize` on a type that has methods using `unsafe`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::DERIVE_PARTIAL_EQ_WITHOUT_EQ",
+        default_level: Allow,
+        desc: "deriving `PartialEq` on a type that can implement `Eq`, without implementing `Eq`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::DERIVABLE_IMPLS",
+        default_level: Warn,
+        desc: "manual implementation of the `Default` trait which is equal to a derive",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::DROP_NON_DROP",
+        default_level: Warn,
+        desc: "call to `std::mem::drop` with a value which does not implement `Drop`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::FORGET_NON_DROP",
+        default_level: Warn,
+        desc: "call to `std::mem::forget` with a value which does not implement `Drop`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::MEM_FORGET",
+        default_level: Allow,
+        desc: "`mem::forget` usage on `Drop` types, likely to cause memory leaks",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::EMPTY_ENUM",
+        default_level: Allow,
+        desc: "enum with no variants",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::INVALID_UPCAST_COMPARISONS",
+        default_level: Allow,
+        desc: "a comparison involving an upcast which is always true or false",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::INVALID_REGEX",
+        default_level: Deny,
+        desc: "invalid regular expressions",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::TRIVIAL_REGEX",
+        default_level: Allow,
+        desc: "trivial regular expressions",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::REGEX_CREATION_IN_LOOPS",
+        default_level: Warn,
+        desc: "regular expression compilation performed in a loop",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::IFS_SAME_COND",
+        default_level: Deny,
+        desc: "consecutive `if`s with the same condition",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::SAME_FUNCTIONS_IN_IF_CONDITION",
+        default_level: Allow,
+        desc: "consecutive `if`s with the same function call",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::IF_SAME_THEN_ELSE",
+        default_level: Warn,
+        desc: "`if` with the same `then` and `else` blocks",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::BRANCHES_SHARING_CODE",
+        default_level: Allow,
+        desc: "`if` statement with shared code in all blocks",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::COPY_ITERATOR",
+        default_level: Allow,
+        desc: "implementing `Iterator` on a `Copy` type",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::USELESS_FORMAT",
+        default_level: Warn,
+        desc: "useless use of `format!`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::MANUAL_SWAP",
+        default_level: Warn,
+        desc: "manual swap of two variables",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::ALMOST_SWAPPED",
+        default_level: Deny,
+        desc: "`foo = bar; bar = foo` sequence",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::PANICKING_OVERFLOW_CHECKS",
+        default_level: Deny,
+        desc: "overflow checks which will panic in debug mode",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::NEW_WITHOUT_DEFAULT",
+        default_level: Warn,
+        desc: "`pub fn new() -> Self` method without `Default` implementation",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::DISALLOWED_NAMES",
+        default_level: Warn,
+        desc: "usage of a disallowed/placeholder name",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::TOO_MANY_ARGUMENTS",
+        default_level: Warn,
+        desc: "functions with too many arguments",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::TOO_MANY_LINES",
+        default_level: Allow,
+        desc: "functions with too many lines",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::NOT_UNSAFE_PTR_ARG_DEREF",
+        default_level: Deny,
+        desc: "public functions dereferencing raw pointer arguments but not marked `unsafe`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::MUST_USE_UNIT",
+        default_level: Warn,
+        desc: "`#[must_use]` attribute on a unit-returning function / method",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::DOUBLE_MUST_USE",
+        default_level: Warn,
+        desc: "`#[must_use]` attribute on a `#[must_use]`-returning function / method",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::MUST_USE_CANDIDATE",
+        default_level: Allow,
+        desc: "function or method that could take a `#[must_use]` attribute",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::RESULT_UNIT_ERR",
+        default_level: Warn,
+        desc: "public function returning `Result` with an `Err` type of `()`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::RESULT_LARGE_ERR",
+        default_level: Warn,
+        desc: "function returning `Result` with large `Err` type",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::MISNAMED_GETTERS",
+        default_level: Warn,
+        desc: "getter method returning the wrong field",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::IMPL_TRAIT_IN_PARAMS",
+        default_level: Allow,
+        desc: "`impl Trait` is used in the function's parameters",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::RENAMED_FUNCTION_PARAMS",
+        default_level: Allow,
+        desc: "renamed function parameters in trait implementation",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::REF_OPTION",
+        default_level: Allow,
+        desc: "function signature uses `&Option<T>` instead of `Option<&T>`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::DOC_LINK_WITH_QUOTES",
+        default_level: Allow,
+        desc: "possible typo for an intra-doc link",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::DOC_MARKDOWN",
+        default_level: Allow,
+        desc: "presence of `_`, `::` or camel-case outside backticks in documentation",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::DOC_NESTED_REFDEFS",
+        default_level: Warn,
+        desc: "link reference defined in list item or quote",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::MISSING_SAFETY_DOC",
+        default_level: Warn,
+        desc: "`pub unsafe fn` without `# Safety` docs",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::MISSING_ERRORS_DOC",
+        default_level: Allow,
+        desc: "`pub fn` returns `Result` without `# Errors` in doc comment",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::MISSING_PANICS_DOC",
+        default_level: Allow,
+        desc: "`pub fn` may panic without `# Panics` in doc comment",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::NEEDLESS_DOCTEST_MAIN",
+        default_level: Warn,
+        desc: "presence of `fn main() {` in code examples",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::TEST_ATTR_IN_DOCTEST",
+        default_level: Warn,
+        desc: "presence of `#[test]` in code examples",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::UNNECESSARY_SAFETY_DOC",
+        default_level: Allow,
+        desc: "`pub fn` or `pub trait` with `# Safety` docs",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::SUSPICIOUS_DOC_COMMENTS",
+        default_level: Warn,
+        desc: "suspicious usage of (outer) doc comments",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::EMPTY_DOCS",
+        default_level: Warn,
+        desc: "docstrings exist but documentation is empty",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::DOC_LAZY_CONTINUATION",
+        default_level: Warn,
+        desc: "require every line of a paragraph to be indented and marked",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::EMPTY_LINE_AFTER_OUTER_ATTR",
+        default_level: Warn,
+        desc: "empty line after outer attribute",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::EMPTY_LINE_AFTER_DOC_COMMENTS",
+        default_level: Warn,
+        desc: "empty line after doc comments",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::TOO_LONG_FIRST_DOC_PARAGRAPH",
+        default_level: Allow,
+        desc: "ensure the first documentation paragraph is short",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::DOC_INCLUDE_WITHOUT_CFG",
+        default_level: Allow,
+        desc: "check if files included in documentation are behind `cfg(doc)`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::NEG_MULTIPLY",
+        default_level: Warn,
+        desc: "multiplying integers by `-1`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::USELESS_LET_IF_SEQ",
+        default_level: Allow,
+        desc: "unidiomatic `let mut` declaration followed by initialization in `if`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::MIXED_READ_WRITE_IN_EXPRESSION",
+        default_level: Allow,
+        desc: "whether a variable read occurs before a write depends on sub-expression evaluation order",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::DIVERGING_SUB_EXPRESSION",
+        default_level: Warn,
+        desc: "whether an expression contains a diverging sub expression",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::MISSING_DOCS_IN_PRIVATE_ITEMS",
+        default_level: Allow,
+        desc: "detects missing documentation for private members",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::MISSING_INLINE_IN_PUBLIC_ITEMS",
+        default_level: Allow,
+        desc: "detects missing `#[inline]` attribute for public callables (functions, trait methods, methods...)",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::EXHAUSTIVE_ENUMS",
+        default_level: Allow,
+        desc: "detects exported enums that have not been marked #[non_exhaustive]",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::EXHAUSTIVE_STRUCTS",
+        default_level: Allow,
+        desc: "detects exported structs that have not been marked #[non_exhaustive]",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::UNUSED_RESULT_OK",
+        default_level: Allow,
+        desc: "Use of `.ok()` to silence `Result`'s `#[must_use]` is misleading. Use `let _ =` instead.",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::MATCH_RESULT_OK",
+        default_level: Warn,
+        desc: "usage of `ok()` in `let Some(pat)` statements is unnecessary, match on `Ok(pat)` instead",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::PARTIALEQ_NE_IMPL",
+        default_level: Warn,
+        desc: "re-implementing `PartialEq::ne`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::UNUSED_IO_AMOUNT",
+        default_level: Deny,
+        desc: "unused written/read amount",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::LARGE_ENUM_VARIANT",
+        default_level: Warn,
+        desc: "large size difference between variants on an enum",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::EXPLICIT_WRITE",
+        default_level: Warn,
+        desc: "using the `write!()` family of functions instead of the `print!()` family of functions, when using the latter would work",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::NEEDLESS_PASS_BY_VALUE",
+        default_level: Allow,
+        desc: "functions taking arguments by value, but not consuming them in its body",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::TRIVIALLY_COPY_PASS_BY_REF",
+        default_level: Allow,
+        desc: "functions taking small copyable arguments by reference",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::LARGE_TYPES_PASSED_BY_VALUE",
+        default_level: Allow,
+        desc: "functions taking large arguments by value",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::REF_OPTION_REF",
+        default_level: Allow,
+        desc: "use `Option<&T>` instead of `&Option<&T>`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::INFINITE_ITER",
+        default_level: Deny,
+        desc: "infinite iteration",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::MAYBE_INFINITE_ITER",
+        default_level: Allow,
+        desc: "possible infinite iteration",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::INLINE_FN_WITHOUT_BODY",
+        default_level: Deny,
+        desc: "use of `#[inline]` on trait methods without bodies",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::USELESS_CONVERSION",
+        default_level: Warn,
+        desc: "calls to `Into`, `TryInto`, `From`, `TryFrom`, or `IntoIter` which perform useless conversions to the same type",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::IMPLICIT_HASHER",
+        default_level: Allow,
+        desc: "missing generalization over different hashers",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::FALLIBLE_IMPL_FROM",
+        default_level: Allow,
+        desc: "Warn on impls of `From<..>` that contain `panic!()` or `unwrap()`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::QUESTION_MARK",
+        default_level: Warn,
+        desc: "checks for expressions that could be replaced by the question mark operator",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::MANUAL_LET_ELSE",
+        default_level: Allow,
+        desc: "manual implementation of a let...else statement",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::QUESTION_MARK_USED",
+        default_level: Allow,
+        desc: "complains if the question mark operator is used",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::SUSPICIOUS_ARITHMETIC_IMPL",
+        default_level: Warn,
+        desc: "suspicious use of operators in impl of arithmetic trait",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::SUSPICIOUS_OP_ASSIGN_IMPL",
+        default_level: Warn,
+        desc: "suspicious use of operators in impl of OpAssign trait",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::OPTION_MAP_UNIT_FN",
+        default_level: Warn,
+        desc: "using `option.map(f)`, where `f` is a function or closure that returns `()`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::RESULT_MAP_UNIT_FN",
+        default_level: Warn,
+        desc: "using `result.map(f)`, where `f` is a function or closure that returns `()`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::MULTIPLE_INHERENT_IMPL",
+        default_level: Allow,
+        desc: "Multiple inherent impl that could be grouped",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::NEG_CMP_OP_ON_PARTIAL_ORD",
+        default_level: Warn,
+        desc: "The use of negated comparison operators on partially ordered types may produce confusing code.",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::PANICKING_UNWRAP",
+        default_level: Deny,
+        desc: "checks for calls of `unwrap[_err]()` that will always fail",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::UNNECESSARY_UNWRAP",
+        default_level: Warn,
+        desc: "checks for calls of `unwrap[_err]()` that cannot fail",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::INDEXING_SLICING",
+        default_level: Allow,
+        desc: "indexing/slicing usage",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::OUT_OF_BOUNDS_INDEXING",
+        default_level: Deny,
+        desc: "out of bounds constant indexing",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::DECLARE_INTERIOR_MUTABLE_CONST",
+        default_level: Warn,
+        desc: "declaring `const` with interior mutability",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::BORROW_INTERIOR_MUTABLE_CONST",
+        default_level: Warn,
+        desc: "referencing `const` with interior mutability",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::PTR_OFFSET_WITH_CAST",
+        default_level: Warn,
+        desc: "unneeded pointer offset cast",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::REDUNDANT_CLONE",
+        default_level: Allow,
+        desc: "`clone()` of an owned value that is going to be dropped immediately",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::SLOW_VECTOR_INITIALIZATION",
+        default_level: Warn,
+        desc: "slow vector initialization",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::UNNECESSARY_WRAPS",
+        default_level: Allow,
+        desc: "functions that only return `Ok` or `Some`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::ASSERTIONS_ON_CONSTANTS",
+        default_level: Warn,
+        desc: "`assert!(true)` / `assert!(false)` will be optimized out by the compiler, and should probably be replaced by a `panic!()` or `unreachable!()`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::ASSERTIONS_ON_RESULT_STATES",
+        default_level: Allow,
+        desc: "`assert!(r.is_ok())` or `assert!(r.is_err())` gives worse panic messages than directly calling `r.unwrap()` or `r.unwrap_err()`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::INHERENT_TO_STRING",
+        default_level: Warn,
+        desc: "type implements inherent method `to_string()`, but should instead implement the `Display` trait",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::INHERENT_TO_STRING_SHADOW_DISPLAY",
+        default_level: Deny,
+        desc: "type implements inherent method `to_string()`, which gets shadowed by the implementation of the `Display` trait",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::TYPE_REPETITION_IN_BOUNDS",
+        default_level: Allow,
+        desc: "types are repeated unnecessarily in trait bounds, use `+` instead of using `T: _, T: _`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::TRAIT_DUPLICATION_IN_BOUNDS",
+        default_level: Allow,
+        desc: "check if the same trait bounds are specified more than once during a generic declaration",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::COMPARISON_CHAIN",
+        default_level: Warn,
+        desc: "`if`s that can be rewritten with `match` and `cmp`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::MUTABLE_KEY_TYPE",
+        default_level: Warn,
+        desc: "Check for mutable `Map`/`Set` key type",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::RECURSIVE_FORMAT_IMPL",
+        default_level: Deny,
+        desc: "Format trait method called while implementing the same Format trait",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::PRINT_IN_FORMAT_IMPL",
+        default_level: Warn,
+        desc: "use of a print macro in a formatting trait impl",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::REDUNDANT_CLOSURE_CALL",
+        default_level: Warn,
+        desc: "throwaway closures called in the expression they are defined",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::LET_AND_RETURN",
+        default_level: Warn,
+        desc: "creating a let-binding and then immediately returning it like `let x = expr; x` at the end of a block",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::NEEDLESS_RETURN",
+        default_level: Warn,
+        desc: "using a return statement like `return expr;` where an expression would suffice",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::NEEDLESS_RETURN_WITH_QUESTION_MARK",
+        default_level: Warn,
+        desc: "using a return statement like `return Err(expr)?;` where removing it would suffice",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::ITEMS_AFTER_STATEMENTS",
+        default_level: Allow,
+        desc: "blocks where an item comes after a statement",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::NEEDLESS_PARENS_ON_RANGE_LITERALS",
+        default_level: Warn,
+        desc: "needless parenthesis on range literals can be removed",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::CREATE_DIR",
+        default_level: Allow,
+        desc: "calling `std::fs::create_dir` instead of `std::fs::create_dir_all`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::ENUM_VARIANT_NAMES",
+        default_level: Warn,
+        desc: "enums where all variants share a prefix/postfix",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::STRUCT_FIELD_NAMES",
+        default_level: Allow,
+        desc: "structs where all fields share a prefix/postfix or contain the name of the struct",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::MODULE_NAME_REPETITIONS",
+        default_level: Allow,
+        desc: "type names prefixed/postfixed with their containing module's name",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::MODULE_INCEPTION",
+        default_level: Warn,
+        desc: "modules that have the same name as their parent module",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::UPPER_CASE_ACRONYMS",
+        default_level: Warn,
+        desc: "capitalized acronyms are against the naming convention",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::DEFAULT_TRAIT_ACCESS",
+        default_level: Allow,
+        desc: "checks for literal calls to `Default::default()`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::FIELD_REASSIGN_WITH_DEFAULT",
+        default_level: Warn,
+        desc: "binding initialized with Default should have its fields set in the initializer",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::UNUSED_SELF",
+        default_level: Allow,
+        desc: "methods that contain a `self` argument but don't use it",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::DEBUG_ASSERT_WITH_MUT_CALL",
+        default_level: Allow,
+        desc: "mutable arguments in `debug_assert{,_ne,_eq}!`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::EXIT",
+        default_level: Allow,
+        desc: "detects `std::process::exit` calls",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::TO_DIGIT_IS_SOME",
+        default_level: Warn,
+        desc: "`char.is_digit()` is clearer",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::LARGE_STACK_ARRAYS",
+        default_level: Allow,
+        desc: "allocating large arrays on stack may cause stack overflow",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::LARGE_CONST_ARRAYS",
+        default_level: Warn,
+        desc: "large non-scalar const array may cause performance overhead",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::IMPRECISE_FLOPS",
+        default_level: Allow,
+        desc: "usage of imprecise floating point operations",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::SUBOPTIMAL_FLOPS",
+        default_level: Allow,
+        desc: "usage of sub-optimal floating point operations",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::AS_CONVERSIONS",
+        default_level: Allow,
+        desc: "using a potentially dangerous silent `as` conversion",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::LET_UNDERSCORE_MUST_USE",
+        default_level: Allow,
+        desc: "non-binding `let` on a `#[must_use]` expression",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::LET_UNDERSCORE_LOCK",
+        default_level: Deny,
+        desc: "non-binding `let` on a synchronization lock",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::LET_UNDERSCORE_FUTURE",
+        default_level: Warn,
+        desc: "non-binding `let` on a future",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::LET_UNDERSCORE_UNTYPED",
+        default_level: Allow,
+        desc: "non-binding `let` without a type annotation",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::STRUCT_EXCESSIVE_BOOLS",
+        default_level: Allow,
+        desc: "using too many bools in a struct",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::FN_PARAMS_EXCESSIVE_BOOLS",
+        default_level: Allow,
+        desc: "using too many bools in function parameters",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::ENUM_GLOB_USE",
+        default_level: Allow,
+        desc: "use items that import all variants of an enum",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::WILDCARD_IMPORTS",
+        default_level: Allow,
+        desc: "lint `use _::*` statements",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::REDUNDANT_PUB_CRATE",
+        default_level: Allow,
+        desc: "Using `pub(crate)` visibility on items that are not crate visible due to the visibility of the module that contains them.",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::EXPLICIT_DEREF_METHODS",
+        default_level: Allow,
+        desc: "Explicit use of deref or deref_mut method while not in a method chain.",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::NEEDLESS_BORROW",
+        default_level: Warn,
+        desc: "taking a reference that is going to be automatically dereferenced",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::REF_BINDING_TO_REFERENCE",
+        default_level: Allow,
+        desc: "`ref` binding to a reference",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::EXPLICIT_AUTO_DEREF",
+        default_level: Warn,
+        desc: "dereferencing when the compiler would automatically dereference",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::OPTION_IF_LET_ELSE",
+        default_level: Allow,
+        desc: "reimplementation of Option::map_or",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::FUTURE_NOT_SEND",
+        default_level: Allow,
+        desc: "public Futures must be Send",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::LARGE_FUTURES",
+        default_level: Allow,
+        desc: "large future may lead to unexpected stack overflows",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::IF_LET_MUTEX",
+        default_level: Deny,
+        desc: "locking a `Mutex` in an `if let` block can cause deadlocks",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::IF_NOT_ELSE",
+        default_level: Allow,
+        desc: "`if` branches that could be swapped so no negation operation is necessary on the condition",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::EQUATABLE_IF_LET",
+        default_level: Allow,
+        desc: "using pattern matching instead of equality",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::MANUAL_ASYNC_FN",
+        default_level: Warn,
+        desc: "manual implementations of `async` functions can be simplified using the dedicated syntax",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::PANIC_IN_RESULT_FN",
+        default_level: Allow,
+        desc: "functions of type `Result<..>` that contain `panic!()` or assertion",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::MACRO_USE_IMPORTS",
+        default_level: Allow,
+        desc: "#[macro_use] is no longer needed",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::PATTERN_TYPE_MISMATCH",
+        default_level: Allow,
+        desc: "type of pattern does not match the expression type",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::UNWRAP_IN_RESULT",
+        default_level: Allow,
+        desc: "functions of type `Result<..>` or `Option`<...> that contain `expect()` or `unwrap()`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::SEMICOLON_IF_NOTHING_RETURNED",
+        default_level: Allow,
+        desc: "add a semicolon if nothing is returned",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::ASYNC_YIELDS_ASYNC",
+        default_level: Deny,
+        desc: "async blocks that return a type that can be awaited",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::DISALLOWED_MACROS",
+        default_level: Warn,
+        desc: "use of a disallowed macro",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::DISALLOWED_METHODS",
+        default_level: Warn,
+        desc: "use of a disallowed method call",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::EMPTY_DROP",
+        default_level: Allow,
+        desc: "empty `Drop` implementations",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::STR_TO_STRING",
+        default_level: Allow,
+        desc: "using `to_string()` on a `&str`, which should be `to_owned()`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::STRING_TO_STRING",
+        default_level: Allow,
+        desc: "using `to_string()` on a `String`, which should be `clone()`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::ZERO_SIZED_MAP_VALUES",
+        default_level: Allow,
+        desc: "usage of map with zero-sized value type",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::VEC_INIT_THEN_PUSH",
+        default_level: Warn,
+        desc: "`push` immediately after `Vec` creation",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::REDUNDANT_SLICING",
+        default_level: Warn,
+        desc: "redundant slicing of the whole range of a type",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::DEREF_BY_SLICING",
+        default_level: Allow,
+        desc: "slicing instead of dereferencing",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::FROM_STR_RADIX_10",
+        default_level: Warn,
+        desc: "from_str_radix with radix 10",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::IF_THEN_SOME_ELSE_NONE",
+        default_level: Allow,
+        desc: "Finds if-else that could be written using either `bool::then` or `bool::then_some`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::BOOL_ASSERT_COMPARISON",
+        default_level: Warn,
+        desc: "Using a boolean as comparison value in an assert_* macro when there is no need",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::UNUSED_ASYNC",
+        default_level: Allow,
+        desc: "finds async functions with no await statements",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::DISALLOWED_TYPES",
+        default_level: Warn,
+        desc: "use of disallowed types",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::MISSING_ENFORCED_IMPORT_RENAMES",
+        default_level: Warn,
+        desc: "enforce import renames",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::STRLEN_ON_C_STRINGS",
+        default_level: Warn,
+        desc: "using `libc::strlen` on a `CString` or `CStr` value, while `as_bytes().len()` or `to_bytes().len()` respectively can be used instead",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::SELF_NAMED_CONSTRUCTORS",
+        default_level: Warn,
+        desc: "method should not have the same name as the type it is implemented for",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::ITER_NOT_RETURNING_ITERATOR",
+        default_level: Allow,
+        desc: "methods named `iter` or `iter_mut` that do not return an `Iterator`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::MANUAL_ASSERT",
+        default_level: Allow,
+        desc: "`panic!` and only a `panic!` in `if`-then statement",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::NON_SEND_FIELDS_IN_SEND_TY",
+        default_level: Allow,
+        desc: "there is a field that is not safe to be sent to another thread in a `Send` struct",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::UNDOCUMENTED_UNSAFE_BLOCKS",
+        default_level: Allow,
+        desc: "creating an unsafe block without explaining why it is safe",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::UNNECESSARY_SAFETY_COMMENT",
+        default_level: Allow,
+        desc: "annotating safe code with a safety comment",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::FORMAT_IN_FORMAT_ARGS",
+        default_level: Warn,
+        desc: "`format!` used in a macro that does formatting",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::TO_STRING_IN_FORMAT_ARGS",
+        default_level: Warn,
+        desc: "`to_string` applied to a type that implements `Display` in format args",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::UNINLINED_FORMAT_ARGS",
+        default_level: Allow,
+        desc: "using non-inlined variables in `format!` calls",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::UNUSED_FORMAT_SPECS",
+        default_level: Warn,
+        desc: "use of a format specifier that has no effect",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::TRAILING_EMPTY_ARRAY",
+        default_level: Allow,
+        desc: "struct with a trailing zero-sized array but without `#[repr(C)]` or another `repr` attribute",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::NEEDLESS_LATE_INIT",
+        default_level: Warn,
+        desc: "late initializations that can be replaced by a `let` statement with an initializer",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::RETURN_SELF_NOT_MUST_USE",
+        default_level: Allow,
+        desc: "missing `#[must_use]` annotation on a method returning `Self`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::INIT_NUMBERED_FIELDS",
+        default_level: Warn,
+        desc: "numbered fields in tuple struct initializer",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::MANUAL_BITS",
+        default_level: Warn,
+        desc: "manual implementation of `size_of::<T>() * 8` can be simplified with `T::BITS`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::DEFAULT_UNION_REPRESENTATION",
+        default_level: Allow,
+        desc: "unions without a `#[repr(C)]` attribute",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::ONLY_USED_IN_RECURSION",
+        default_level: Warn,
+        desc: "arguments that is only used in recursion can be removed",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::DBG_MACRO",
+        default_level: Allow,
+        desc: "`dbg!` macro is intended as a debugging tool",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::PRINT_WITH_NEWLINE",
+        default_level: Warn,
+        desc: "using `print!()` with a format string that ends in a single newline",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::PRINTLN_EMPTY_STRING",
+        default_level: Warn,
+        desc: "using `println!(\"\")` with an empty string",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::PRINT_STDOUT",
+        default_level: Allow,
+        desc: "printing on stdout",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::PRINT_STDERR",
+        default_level: Allow,
+        desc: "printing on stderr",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::USE_DEBUG",
+        default_level: Allow,
+        desc: "use of `Debug`-based formatting",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::PRINT_LITERAL",
+        default_level: Warn,
+        desc: "printing a literal with a format string",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::WRITE_WITH_NEWLINE",
+        default_level: Warn,
+        desc: "using `write!()` with a format string that ends in a single newline",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::WRITELN_EMPTY_STRING",
+        default_level: Warn,
+        desc: "using `writeln!(buf, \"\")` with an empty string",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::WRITE_LITERAL",
+        default_level: Warn,
+        desc: "writing a literal with a format string",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::CARGO_COMMON_METADATA",
+        default_level: Allow,
+        desc: "common metadata is defined in `Cargo.toml`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::REDUNDANT_FEATURE_NAMES",
+        default_level: Allow,
+        desc: "usage of a redundant feature name",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::NEGATIVE_FEATURE_NAMES",
+        default_level: Allow,
+        desc: "usage of a negative feature name",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::MULTIPLE_CRATE_VERSIONS",
+        default_level: Allow,
+        desc: "multiple versions of the same crate being used",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::WILDCARD_DEPENDENCIES",
+        default_level: Allow,
+        desc: "wildcard dependencies being used",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::LINT_GROUPS_PRIORITY",
+        default_level: Deny,
+        desc: "a lint group in `Cargo.toml` at the same priority as a lint",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::UNNECESSARY_OWNED_EMPTY_STRINGS",
+        default_level: Warn,
+        desc: "detects cases of references to owned empty strings being passed as an argument to a function expecting `&str`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::FORMAT_PUSH_STRING",
+        default_level: Allow,
+        desc: "`format!(..)` appended to existing `String`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::LARGE_INCLUDE_FILE",
+        default_level: Allow,
+        desc: "including a large file",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::TRIM_SPLIT_WHITESPACE",
+        default_level: Warn,
+        desc: "using `str::trim()` or alike before `str::split_whitespace`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::RC_CLONE_IN_VEC_INIT",
+        default_level: Warn,
+        desc: "initializing reference-counted pointer in `vec![elem; len]`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::SWAP_PTR_TO_REF",
+        default_level: Warn,
+        desc: "call to `mem::swap` using pointer derived references",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::MISMATCHING_TYPE_PARAM_ORDER",
+        default_level: Allow,
+        desc: "type parameter positioned inconsistently between type def and impl block",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::READ_ZERO_BYTE_VEC",
+        default_level: Allow,
+        desc: "checks for reads into a zero-length `Vec`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::DEFAULT_INSTEAD_OF_ITER_EMPTY",
+        default_level: Warn,
+        desc: "check `std::iter::Empty::default()` and replace with `std::iter::empty()`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::MANUAL_REM_EUCLID",
+        default_level: Warn,
+        desc: "manually reimplementing `rem_euclid`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::MANUAL_RETAIN",
+        default_level: Warn,
+        desc: "`retain()` is simpler and the same functionalities",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::MANUAL_ROTATE",
+        default_level: Warn,
+        desc: "using bit shifts to rotate integers",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::ABSURD_EXTREME_COMPARISONS",
+        default_level: Deny,
+        desc: "a comparison with a maximum or minimum value that is always true or false",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::ARITHMETIC_SIDE_EFFECTS",
+        default_level: Allow,
+        desc: "any arithmetic expression that can cause side effects like overflows or panics",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::FLOAT_ARITHMETIC",
+        default_level: Allow,
+        desc: "any floating-point arithmetic statement",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::ASSIGN_OP_PATTERN",
+        default_level: Warn,
+        desc: "assigning the result of an operation on a variable to that same variable",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::MISREFACTORED_ASSIGN_OP",
+        default_level: Warn,
+        desc: "having a variable on both sides of an assign op",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::BAD_BIT_MASK",
+        default_level: Deny,
+        desc: "expressions of the form `_ & mask == select` that will only ever return `true` or `false`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::INEFFECTIVE_BIT_MASK",
+        default_level: Deny,
+        desc: "expressions where a bit mask will be rendered useless by a comparison, e.g., `(x | 1) > 2`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::VERBOSE_BIT_MASK",
+        default_level: Allow,
+        desc: "expressions where a bit mask is less readable than the corresponding method call",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::DOUBLE_COMPARISONS",
+        default_level: Warn,
+        desc: "unnecessary double comparisons that can be simplified",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::IMPOSSIBLE_COMPARISONS",
+        default_level: Deny,
+        desc: "double comparisons that will never evaluate to `true`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::REDUNDANT_COMPARISONS",
+        default_level: Deny,
+        desc: "double comparisons where one of them can be removed",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::DURATION_SUBSEC",
+        default_level: Warn,
+        desc: "checks for calculation of subsecond microseconds or milliseconds",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::EQ_OP",
+        default_level: Deny,
+        desc: "equal operands on both sides of a comparison or bitwise combination (e.g., `x == x`)",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::OP_REF",
+        default_level: Warn,
+        desc: "taking a reference to satisfy the type constraints on `==`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::ERASING_OP",
+        default_level: Deny,
+        desc: "using erasing operations, e.g., `x * 0` or `y & 0`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::FLOAT_EQUALITY_WITHOUT_ABS",
+        default_level: Warn,
+        desc: "float equality check without `.abs()`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::IDENTITY_OP",
+        default_level: Warn,
+        desc: "using identity operations, e.g., `x + 0` or `y / 1`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::INTEGER_DIVISION",
+        default_level: Allow,
+        desc: "integer division may cause loss of precision",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::CMP_OWNED",
+        default_level: Warn,
+        desc: "creating owned instances for comparing with others, e.g., `x == \"foo\".to_string()`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::FLOAT_CMP",
+        default_level: Allow,
+        desc: "using `==` or `!=` on float values instead of comparing difference with an allowed error",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::FLOAT_CMP_CONST",
+        default_level: Allow,
+        desc: "using `==` or `!=` on float constants instead of comparing difference with an allowed error",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::MODULO_ONE",
+        default_level: Deny,
+        desc: "taking an integer modulo +/-1, which can either panic/overflow or always returns 0",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::MODULO_ARITHMETIC",
+        default_level: Allow,
+        desc: "any modulo arithmetic statement",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::NEEDLESS_BITWISE_BOOL",
+        default_level: Allow,
+        desc: "Boolean expressions that use bitwise rather than lazy operators",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::PTR_EQ",
+        default_level: Warn,
+        desc: "use `std::ptr::eq` when comparing raw pointers",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::SELF_ASSIGNMENT",
+        default_level: Deny,
+        desc: "explicit self-assignment",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::STD_INSTEAD_OF_CORE",
+        default_level: Allow,
+        desc: "type is imported from std when available in core",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::STD_INSTEAD_OF_ALLOC",
+        default_level: Allow,
+        desc: "type is imported from std when available in alloc",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::ALLOC_INSTEAD_OF_CORE",
+        default_level: Allow,
+        desc: "type is imported from alloc when available in core",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::MANUAL_INSTANT_ELAPSED",
+        default_level: Allow,
+        desc: "subtraction between `Instant::now()` and previous `Instant`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::UNCHECKED_DURATION_SUBTRACTION",
+        default_level: Allow,
+        desc: "finds unchecked subtraction of a 'Duration' from an 'Instant'",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::PARTIALEQ_TO_NONE",
+        default_level: Warn,
+        desc: "Binary comparison to `Option<T>::None` relies on `T: PartialEq`, which is unneeded",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::MANUAL_CLAMP",
+        default_level: Warn,
+        desc: "using a clamp pattern instead of the clamp function",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::MANUAL_STRING_NEW",
+        default_level: Allow,
+        desc: "empty String is being created manually",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::UNUSED_PEEKABLE",
+        default_level: Allow,
+        desc: "creating a peekable iterator without using any of its methods",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::BOOL_TO_INT_WITH_IF",
+        default_level: Allow,
+        desc: "using if to convert bool to int",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::BOX_DEFAULT",
+        default_level: Warn,
+        desc: "Using Box::new(T::default()) instead of Box::default()",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::IMPLICIT_SATURATING_ADD",
+        default_level: Warn,
+        desc: "Perform saturating addition instead of implicitly checking max bound of data type",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::MISSING_TRAIT_METHODS",
+        default_level: Allow,
+        desc: "trait implementation uses default provided method",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::FROM_RAW_WITH_VOID_PTR",
+        default_level: Warn,
+        desc: "creating a `Box` from a void raw pointer",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::SUSPICIOUS_XOR_USED_AS_POW",
+        default_level: Allow,
+        desc: "XOR (`^`) operator possibly used as exponentiation operator",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::MANUAL_IS_ASCII_CHECK",
+        default_level: Warn,
+        desc: "use dedicated method to check ascii range",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::SEMICOLON_INSIDE_BLOCK",
+        default_level: Allow,
+        desc: "add a semicolon inside the block",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::SEMICOLON_OUTSIDE_BLOCK",
+        default_level: Allow,
+        desc: "add a semicolon outside the block",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::PERMISSIONS_SET_READONLY_FALSE",
+        default_level: Warn,
+        desc: "Checks for calls to `std::fs::Permissions.set_readonly` with argument `false`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::SIZE_OF_REF",
+        default_level: Warn,
+        desc: "Argument to `std::mem::size_of_val()` is a double-reference, which is almost certainly unintended",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::MULTIPLE_UNSAFE_OPS_PER_BLOCK",
+        default_level: Allow,
+        desc: "more than one unsafe operation per `unsafe` block",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::EXTRA_UNUSED_TYPE_PARAMETERS",
+        default_level: Warn,
+        desc: "unused type parameters in function definitions",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::NO_MANGLE_WITH_RUST_ABI",
+        default_level: Allow,
+        desc: "convert Rust ABI functions to C ABI",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::COLLECTION_IS_NEVER_READ",
+        default_level: Allow,
+        desc: "a collection is never queried",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::MISSING_ASSERT_MESSAGE",
+        default_level: Allow,
+        desc: "checks assertions without a custom panic message",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::NEEDLESS_MAYBE_SIZED",
+        default_level: Warn,
+        desc: "a `?Sized` bound that is unusable due to a `Sized` requirement",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::REDUNDANT_ASYNC_BLOCK",
+        default_level: Warn,
+        desc: "`async { future.await }` can be replaced by `future`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::LET_WITH_TYPE_UNDERSCORE",
+        default_level: Warn,
+        desc: "unneeded underscore type (`_`) in a variable declaration",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::MANUAL_MAIN_SEPARATOR_STR",
+        default_level: Warn,
+        desc: "`&std::path::MAIN_SEPARATOR.to_string()` can be replaced by `std::path::MAIN_SEPARATOR_STR`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::UNNECESSARY_STRUCT_INITIALIZATION",
+        default_level: Allow,
+        desc: "struct built from a base that can be written mode concisely",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::UNNECESSARY_BOX_RETURNS",
+        default_level: Allow,
+        desc: "Needlessly returning a Box",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::LINES_FILTER_MAP_OK",
+        default_level: Warn,
+        desc: "filtering `std::io::Lines` with `filter_map()`, `flat_map()`, or `flatten()` might cause an infinite loop",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::TESTS_OUTSIDE_TEST_MODULE",
+        default_level: Allow,
+        desc: "A test function is outside the testing module.",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::MANUAL_SLICE_SIZE_CALCULATION",
+        default_level: Warn,
+        desc: "manual slice size calculation",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::ITEMS_AFTER_TEST_MODULE",
+        default_level: Warn,
+        desc: "An item was found after the testing module `tests`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::DEFAULT_CONSTRUCTED_UNIT_STRUCTS",
+        default_level: Warn,
+        desc: "unit structs can be constructed without calling `default`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::MISSING_FIELDS_IN_DEBUG",
+        default_level: Allow,
+        desc: "missing fields in manual `Debug` implementation",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::HOST_ENDIAN_BYTES",
+        default_level: Allow,
+        desc: "disallows usage of the `to_ne_bytes` method",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::LITTLE_ENDIAN_BYTES",
+        default_level: Allow,
+        desc: "disallows usage of the `to_le_bytes` method",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::BIG_ENDIAN_BYTES",
+        default_level: Allow,
+        desc: "disallows usage of the `to_be_bytes` method",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::REDUNDANT_TYPE_ANNOTATIONS",
+        default_level: Allow,
+        desc: "warns about needless / redundant type annotations.",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::ARC_WITH_NON_SEND_SYNC",
+        default_level: Warn,
+        desc: "using `Arc` with a type that does not implement `Send` and `Sync`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::NEEDLESS_IF",
+        default_level: Warn,
+        desc: "checks for empty if branches",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::MIN_IDENT_CHARS",
+        default_level: Allow,
+        desc: "disallows idents that are too short",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::LARGE_STACK_FRAMES",
+        default_level: Allow,
+        desc: "checks for functions that allocate a lot of stack space",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::SINGLE_RANGE_IN_VEC_INIT",
+        default_level: Warn,
+        desc: "checks for initialization of `Vec` or arrays which consist of a single range",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::NEEDLESS_PASS_BY_REF_MUT",
+        default_level: Allow,
+        desc: "using a `&mut` argument when it's not mutated",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::NON_CANONICAL_CLONE_IMPL",
+        default_level: Warn,
+        desc: "non-canonical implementation of `Clone` on a `Copy` type",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::NON_CANONICAL_PARTIAL_ORD_IMPL",
+        default_level: Warn,
+        desc: "non-canonical implementation of `PartialOrd` on an `Ord` type",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::SINGLE_CALL_FN",
+        default_level: Allow,
+        desc: "checks for functions that are only used once",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::LEGACY_NUMERIC_CONSTANTS",
+        default_level: Warn,
+        desc: "checks for usage of legacy std numeric constants and methods",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::MANUAL_RANGE_PATTERNS",
+        default_level: Warn,
+        desc: "manually writing range patterns using a combined OR pattern (`|`)",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::TUPLE_ARRAY_CONVERSIONS",
+        default_level: Allow,
+        desc: "checks for tuple<=>array conversions that are not done with `.into()`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::MANUAL_IS_INFINITE",
+        default_level: Warn,
+        desc: "use dedicated method to check if a float is infinite",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::MANUAL_IS_FINITE",
+        default_level: Warn,
+        desc: "use dedicated method to check if a float is finite",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::FOUR_FORWARD_SLASHES",
+        default_level: Warn,
+        desc: "comments with 4 forward slashes (`////`) likely intended to be doc comments (`///`)",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::ERROR_IMPL_ERROR",
+        default_level: Allow,
+        desc: "exported types named `Error` that implement `Error`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::ABSOLUTE_PATHS",
+        default_level: Allow,
+        desc: "checks for usage of an item without a `use` statement",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::REDUNDANT_LOCALS",
+        default_level: Deny,
+        desc: "redundant redefinition of a local binding",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::IGNORED_UNIT_PATTERNS",
+        default_level: Allow,
+        desc: "suggest replacing `_` by `()` in patterns where appropriate",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::RESERVE_AFTER_INITIALIZATION",
+        default_level: Warn,
+        desc: "`reserve` called immediately after `Vec` creation",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::IMPLIED_BOUNDS_IN_IMPLS",
+        default_level: Warn,
+        desc: "specifying bounds that are implied by other bounds in `impl Trait` type",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::MISSING_ASSERTS_FOR_INDEXING",
+        default_level: Allow,
+        desc: "indexing into a slice multiple times without an `assert`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::UNNECESSARY_MAP_ON_CONSTRUCTOR",
+        default_level: Warn,
+        desc: "using `map`/`map_err` on `Option` or `Result` constructors",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::NEEDLESS_BORROWS_FOR_GENERIC_ARGS",
+        default_level: Warn,
+        desc: "taking a reference that is going to be automatically dereferenced",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::MANUAL_HASH_ONE",
+        default_level: Warn,
+        desc: "manual implementations of `BuildHasher::hash_one`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::ITER_WITHOUT_INTO_ITER",
+        default_level: Allow,
+        desc: "implementing `iter(_mut)` without an associated `IntoIterator for (&|&mut) Type` impl",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::INTO_ITER_WITHOUT_ITER",
+        default_level: Allow,
+        desc: "implementing `IntoIterator for (&|&mut) Type` without an inherent `iter(_mut)` method",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::PATHBUF_INIT_THEN_PUSH",
+        default_level: Allow,
+        desc: "`push` immediately after `PathBuf` creation",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::ITER_OVER_HASH_TYPE",
+        default_level: Allow,
+        desc: "iterating over unordered hash-based types (`HashMap` and `HashSet`)",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::IMPL_HASH_BORROW_WITH_STR_AND_BYTES",
+        default_level: Deny,
+        desc: "ensures that the semantics of `Borrow` for `Hash` are satisfied when `Borrow<str>` and `Borrow<[u8]>` are implemented",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::REPEAT_VEC_WITH_CAPACITY",
+        default_level: Warn,
+        desc: "repeating a `Vec::with_capacity` expression which does not retain capacity",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::UNINHABITED_REFERENCES",
+        default_level: Allow,
+        desc: "reference to uninhabited type",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::INEFFECTIVE_OPEN_OPTIONS",
+        default_level: Warn,
+        desc: "usage of both `write(true)` and `append(true)` on same `OpenOptions`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::UNCONDITIONAL_RECURSION",
+        default_level: Warn,
+        desc: "detect unconditional recursion in some traits implementation",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::PUB_UNDERSCORE_FIELDS",
+        default_level: Allow,
+        desc: "struct field prefixed with underscore and marked public",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::MISSING_CONST_FOR_THREAD_LOCAL",
+        default_level: Warn,
+        desc: "suggest using `const` in `thread_local!` macro",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::INCOMPATIBLE_MSRV",
+        default_level: Warn,
+        desc: "ensures that all items used in the crate are available for the current MSRV",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::TO_STRING_TRAIT_IMPL",
+        default_level: Warn,
+        desc: "check for direct implementations of `ToString`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::ASSIGNING_CLONES",
+        default_level: Allow,
+        desc: "assigning the result of cloning may be inefficient",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::ZERO_REPEAT_SIDE_EFFECTS",
+        default_level: Warn,
+        desc: "usage of zero-sized initializations of arrays or vecs causing side effects",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::MANUAL_UNWRAP_OR_DEFAULT",
+        default_level: Warn,
+        desc: "check if a `match` or `if let` can be simplified with `unwrap_or_default`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::INTEGER_DIVISION_REMAINDER_USED",
+        default_level: Allow,
+        desc: "use of disallowed default division and remainder operations",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::MACRO_METAVARS_IN_UNSAFE",
+        default_level: Warn,
+        desc: "expanding macro metavariables in an unsafe block",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::MANUAL_PATTERN_CHAR_COMPARISON",
+        default_level: Warn,
+        desc: "manual char comparison in string patterns",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+    Lint {
+        name: "clippy::SINGLE_CHAR_PATTERN",
+        default_level: Allow,
+        desc: "using a single-character str where a char could be used, e.g., `_.split(\"x\")`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::SET_CONTAINS_OR_INSERT",
+        default_level: Allow,
+        desc: "call to `<set>::contains` followed by `<set>::insert`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::ZOMBIE_PROCESSES",
+        default_level: Warn,
+        desc: "not waiting on a spawned child process",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::POINTERS_IN_NOMEM_ASM_BLOCK",
+        default_level: Warn,
+        desc: "pointers in nomem asm block",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::MANUAL_DIV_CEIL",
+        default_level: Warn,
+        desc: "manually reimplementing `div_ceil`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::MANUAL_IS_POWER_OF_TWO",
+        default_level: Allow,
+        desc: "manually reimplementing `is_power_of_two`",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::NON_ZERO_SUGGESTIONS",
+        default_level: Allow,
+        desc: "suggests using `NonZero#` from `u#` or `i#` for more efficient and type-safe conversions",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::LITERAL_STRING_WITH_FORMATTING_ARGS",
+        default_level: Warn,
+        desc: "Checks if string literals have formatting arguments",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::UNUSED_TRAIT_NAMES",
+        default_level: Allow,
+        desc: "use items that import a trait but only use it anonymously",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::MANUAL_IGNORE_CASE_CMP",
+        default_level: Warn,
+        desc: "manual case-insensitive ASCII comparison",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is true
+[
+    Lint {
+        name: "clippy::UNNECESSARY_LITERAL_BOUND",
+        default_level: Allow,
+        desc: "detects &str that could be &'static str in function return types",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false
+[
+    Lint {
+        name: "clippy::ARBITRARY_SOURCE_ITEM_ORDERING",
+        default_level: Allow,
+        desc: "arbitrary source item ordering",
+        edition_lint_opts: None,
+        report_in_external_macro: true,
+        future_incompatible: None,
+        is_externally_loaded: true,
+        feature_gate: None,
+        crate_level_only: false,
+        eval_always: false,
+    },
+] is false


error: `the `dbg!` macro is intended as a debugging tool` not found in diagnostics on line 5
 --> tests/ui/dbg_macro/dbg_macro.rs:6:17
  |
6 |     //~^ ERROR: the `dbg!` macro is intended as a debugging tool
  |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected because of this pattern
  |

error: `the `dbg!` macro is intended as a debugging tool` not found in diagnostics on line 11
  --> tests/ui/dbg_macro/dbg_macro.rs:12:21
   |
12 |         //~^ ERROR: the `dbg!` macro is intended as a debugging tool
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected because of this pattern
   |

error: `the `dbg!` macro is intended as a debugging tool` not found in diagnostics on line 13
  --> tests/ui/dbg_macro/dbg_macro.rs:14:21
   |
14 |         //~^ ERROR: the `dbg!` macro is intended as a debugging tool
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected because of this pattern
   |

error: `the `dbg!` macro is intended as a debugging tool` not found in diagnostics on line 16
  --> tests/ui/dbg_macro/dbg_macro.rs:17:21
   |
17 |         //~^ ERROR: the `dbg!` macro is intended as a debugging tool
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected because of this pattern
   |

error: `the `dbg!` macro is intended as a debugging tool` not found in diagnostics on line 22
  --> tests/ui/dbg_macro/dbg_macro.rs:23:17
   |
23 |     //~^ ERROR: the `dbg!` macro is intended as a debugging tool
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected because of this pattern
   |

error: `the `dbg!` macro is intended as a debugging tool` not found in diagnostics on line 24
  --> tests/ui/dbg_macro/dbg_macro.rs:25:17
   |
25 |     //~^ ERROR: the `dbg!` macro is intended as a debugging tool
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected because of this pattern
   |

error: `the `dbg!` macro is intended as a debugging tool` not found in diagnostics on line 26
  --> tests/ui/dbg_macro/dbg_macro.rs:27:17
   |
27 |     //~^ ERROR: the `dbg!` macro is intended as a debugging tool
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected because of this pattern
   |

error: `the `dbg!` macro is intended as a debugging tool` not found in diagnostics on line 43
  --> tests/ui/dbg_macro/dbg_macro.rs:44:25
   |
44 |             //~^ ERROR: the `dbg!` macro is intended as a debugging tool
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected because of this pattern
   |

error: `the `dbg!` macro is intended as a debugging tool` not found in diagnostics on line 48
  --> tests/ui/dbg_macro/dbg_macro.rs:49:17
   |
49 |     //~^ ERROR: the `dbg!` macro is intended as a debugging tool
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected because of this pattern
   |

error: `the `dbg!` macro is intended as a debugging tool` not found in diagnostics on line 51
  --> tests/ui/dbg_macro/dbg_macro.rs:52:17
   |
52 |     //~^ ERROR: the `dbg!` macro is intended as a debugging tool
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected because of this pattern
   |

error: `the `dbg!` macro is intended as a debugging tool` not found in diagnostics on line 53
  --> tests/ui/dbg_macro/dbg_macro.rs:54:17
   |
54 |     //~^ ERROR: the `dbg!` macro is intended as a debugging tool
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected because of this pattern
   |

error: `the `dbg!` macro is intended as a debugging tool` not found in diagnostics on line 55
  --> tests/ui/dbg_macro/dbg_macro.rs:56:17
   |
56 |     //~^ ERROR: the `dbg!` macro is intended as a debugging tool
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected because of this pattern
   |

error: `the `dbg!` macro is intended as a debugging tool` not found in diagnostics on line 57
  --> tests/ui/dbg_macro/dbg_macro.rs:58:17
   |
58 |     //~^ ERROR: the `dbg!` macro is intended as a debugging tool
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected because of this pattern
   |

error: `the `dbg!` macro is intended as a debugging tool` not found in diagnostics on line 79
  --> tests/ui/dbg_macro/dbg_macro.rs:80:21
   |
80 |         //~^ ERROR: the `dbg!` macro is intended as a debugging tool
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected because of this pattern
   |

error: `the `dbg!` macro is intended as a debugging tool` not found in diagnostics on line 86
  --> tests/ui/dbg_macro/dbg_macro.rs:87:17
   |
87 |     //~^ ERROR: the `dbg!` macro is intended as a debugging tool
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected because of this pattern
   |

error: `the `dbg!` macro is intended as a debugging tool` not found in diagnostics on line 92
  --> tests/ui/dbg_macro/dbg_macro.rs:93:17
   |
93 |     //~^ ERROR: the `dbg!` macro is intended as a debugging tool
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected because of this pattern
   |

error: `the `dbg!` macro is intended as a debugging tool` not found in diagnostics on line 99
   --> tests/ui/dbg_macro/dbg_macro.rs:100:21
    |
100 |         //~^ ERROR: the `dbg!` macro is intended as a debugging tool
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected because of this pattern
    |

error: `the `dbg!` macro is intended as a debugging tool` not found in diagnostics on line 106
   --> tests/ui/dbg_macro/dbg_macro.rs:107:21
    |
107 |         //~^ ERROR: the `dbg!` macro is intended as a debugging tool
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected because of this pattern
    |

error: `the `dbg!` macro is intended as a debugging tool` not found in diagnostics on line 108
   --> tests/ui/dbg_macro/dbg_macro.rs:109:21
    |
109 |         //~^ ERROR: the `dbg!` macro is intended as a debugging tool
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected because of this pattern
    |

FAILURES:
    tests/ui/dbg_macro/dbg_macro.rs

test result: FAIL. 1 failed; 1028 filtered out

